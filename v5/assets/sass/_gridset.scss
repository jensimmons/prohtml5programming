//   Grids + Sass generated by Gridset: https://gridsetapp.com
//
//   Note ---------------------------------------------------------
//
// * The Gridset Sass output is divided into two types: functions and mixins. 
//   
// * Prefix = the grid prefix you defined in your set.
//   
// * Containers are optional. Use these when a span is nested within another span. So an element spanning columns 2-3 inside 
//   an element spanning 1-5 would be: gs-span(x, 2, 3, (1, 5))
//   
// * When passing arguments, use false for null arguments, so a span with no end would be: gs-span(x, 2), but a span 
//   with no end and a container would be: gs-span(x, 2, false, (1, 5))
//   
// * Use IE flags ($ie) when building styles for Internet Explorer 8 and below. You can use either 'ie' or 'true'. 
//   A span in IE would be: gs-span(x, 2, 3, false, ie) or gs-span(x, 2, 3, false, true)
//
// * Setting "display unit" to true will return the unit with the measurement (ex: 30% or 300px). Default is false.
//   
// * You will need to write your own media queries for different screen sizes. You can generate these based on your 
//   grid widths by using the gs-media function. This will only work in Sass versions 3.2 and up. Here is an example:
//   
//   @include gs-media(x) {
//   	
//   	-- CSS goes here --
//   	
//   }
//     
//   Functions ----------------------------------------------------
//
//   Functions will return an exact measurement (float) for specific properties.
//   
// * gs-grid(prefix)
//   Returns a list of all column widths (in percentages) in a grid.
//   
// * gs-pxcols(prefix)
//   Returns a list of all column widths in a grid that are set to fixed pixel width.
//
// * gs-gutter(prefix, display unit)
//   Returns the exact gutter of a grid as a numeric value.
//   
// * gs-width(prefix, start, end, (container start, container end), display unit)
//   Returns the exact width measurement of the span of columns as a numeric value.
//   
// * gs-marginleft(prefix, start, (container start, container end), display unit)
//   Returns the exact left offset of a span as a numeric value.
//
// * gs-adjust(prefix, measurement, (container start, container end), display unit)
//   Returns a nested measurement adjusted for the width of the container.
//
//   -------------------------------------------------------------- 

@function gs-grid($prefix){

  @if $prefix == ba	{ @return (20.834739795899402,45.67427040820119,20.834739795899402); }
  @if $prefix == bb	{ @return (12.715579571013219,31.082527840254542,31.082527840254542,13.019364748477708); }
  @if $prefix == bc	{ @return (10.244755552705781,23.149329631529476,23.149329631529476,23.149329631529476,10.244755552705781); }
  @if $prefix == u	{ @return (); }
  @if $prefix == bd	{ @return (7.185336126276111,14.936363636363634,14.936363636363634,14.936363636363634,14.936363636363634,14.936363636363634,7.185336126276111); }

}

@function gs-pxcols($prefix){
  
  @if $prefix == ba	{ @return (false,false,false); }
  @if $prefix == bb	{ @return (false,false,false,false); }
  @if $prefix == bc	{ @return (false,false,false,false,false); }
  @if $prefix == u	{ @return (false,false,false,false,false,false,false); }
  @if $prefix == bd	{ @return (false,false,false,false,false,false,false); }

}

@function gs-gutter($prefix, $unit:false){
  
  $gutter: 0;

  @if $prefix == ba	{ $gutter: 6.25; }
  @if $prefix == bb	{ $gutter: 4; }
  @if $prefix == bc	{ $gutter: 2.5; }
  @if $prefix == u	{ $gutter: 1.81818182; }
  @if $prefix == bd	{ $gutter: 1.81818182; }

  @if $unit == true { @return #{$gutter + '%'}; }
  @else { @return $gutter; }
	
}

@function gs-width($grid, $start, $end: false, $container: false, $unit: false){

  $cols: gs-grid($grid);
  $gutter: gs-gutter($grid);
  $measure: 0;
  $gutters: 0;
  $i: $start;

  @if $end != false {

    @if ($end - $start) > 0 { $gutters: ($gutter * ($end - $start)); }

    @while $i <= $end {
						
      $measure: $measure + nth($cols,$i);
      $i: $i + 1;

    }

  }
  @else {
		
    $pxcols: gs-pxcols($grid);
    $pxcol: nth($pxcols,$start);
		
    @if ($pxcol != false) and ($unit == true) { @return #{$pxcol + 'px'}; }
		
    $measure: nth($cols,$start);

  }
	
  @if $unit == true { @return #{gs-adjust($grid, $measure + $gutters, $container) + '%'}; }
  @else { @return gs-adjust($grid, $measure + $gutters, $container); }

}

@function gs-marginleft($grid, $spanstart, $container: false, $unit: false){

  @if ($container == false and $spanstart > 1) or ($container != false and $spanstart > nth($container,1)) {

    $start: 1;
    $end: $spanstart - 1;
    
    @if $container != false { $start: nth($container,1); }
    @if $end == $start { $end: false; }
    
    $margin: gs-width($grid, $start, $end);
    $gutter: gs-gutter($grid);
		
    @if $unit == true { @return #{gs-adjust($grid, $margin + $gutter, $container) + '%'}; }
    @else { @return gs-adjust($grid, $margin + $gutter, $container); }

  }
  @else {

    @return 0;

  }

}

@function gs-adjust($grid, $measure, $container: false, $unit: false){
	
  $containerend: false;
  @if length($container) == 2 { $containerend: nth($container,2); }
	
  @if $container != false {

    $adjusted: $measure / gs-width($grid, nth($container,1), $containerend);
    
    @if $unit == true { @return #{($adjusted * 100) + '%'}; }
    @else { @return $adjusted * 100; }

  }
  @else {
	
    @if $unit == true { @return #{$measure + '%'}; }
    @else { @return $measure; }

  }

}

//   Mixins  ------------------------------------------------------
//
//   The Gridset mixins include every property you need to position or add padding to an element, using the functions
//   to calculate these properties.
//   
// * gs-span(prefix, start, end, (container start, container end), IE flag)
//   All of the properties you need to place your element on grid. Enter "all" for 100% width items. 
//   An IE flag of 'ie' or 'true' (without the quotes) will return special styles for Internet Explorer 8 and below.
//   
// * gs-pad(prefix, padding type, (container start, container end))
//   All of the properties you need to add the different types of padding to an element. 
//   Valid types: pad, padfull, padin, padinfull
//   Explanation of padding types here: https://gridsetapp.com/documentation/classes/
//   
// * gs-float(prefix, direction, (container start, container end))
//   All of the properties you need to float an element in one direction and give it the proper amount of margin 
//   in the opposite direction. Direction = left or right.
//   
// * gs-media(prefix, type)
//   This will generate the appropriate media query for a particular grid. (Sass versions 3.2+ only)
//   Valid types: min, max, min-max
//   “min” will output a media query for the lowest width the grid applies, “max” will output a media query for the 
//   maximum width a grid applies, and “min-max” will use both (bookending the query).
//   
//   -------------------------------------------------------------- 

@mixin gs-media($prefix, $type: false){

  @if $prefix == u {
    @media only screen and (min-width: 1100px) { @content; }
  }

  @if $prefix == bd {
    @if ($type == min) { @media only screen and (min-width: 1100px) { @content; } }
    @if ($type == max) { @media only screen and (max-width: 1099px) { @content; } }
    @if ($type == min-max) { @media only screen and (min-width: 1100px) and (max-width: 1099px) { @content; } }
    @else { @media only screen and (min-width: 1100px) { @content; } }
  }

  @if $prefix == bc {
    @if ($type == min) { @media only screen and (min-width: 800px) { @content; } }
    @if ($type == max) { @media only screen and (max-width: 1099px) { @content; } }
    @if ($type == min-max) { @media only screen and (min-width: 800px) and (max-width: 1099px) { @content; } }
    @else { @media only screen and (min-width: 800px) { @content; } }
  }

  @if $prefix == bb {
    @if ($type == min) { @media only screen and (min-width: 500px) { @content; } }
    @if ($type == max) { @media only screen and (max-width: 799px) { @content; } }
    @if ($type == min-max) { @media only screen and (min-width: 500px) and (max-width: 799px) { @content; } }
    @else { @media only screen and (min-width: 500px) { @content; } }
  }

  @if $prefix == ba {
    @media only screen and (max-width: 499px) { @content; }
  }


}

@mixin gs-span($grid, $start, $end: false, $container: false, $ie: false){
	
  @if $start == all {
	
    clear: both;
    display: block;
    float: left;
    margin-left: 0;
    width: 100%;
		
  }
  @else {
  
    $marginright: -100%;
    @if ($ie == ie) or ($ie == true) { $marginright: -99.9%; }
	
    display: block;
    float: left;
    margin-left: #{gs-marginleft($grid, $start, $container) + '%'};  
    margin-right: $marginright;
    width: gs-width($grid, $start, $end, $container, true);
	  
  }

}

@mixin gs-pad($grid, $type: pad, $container: false){

  $pad: 0;

  @if $type == pad or $type == padin {

    $pad: (gs-gutter($grid) / 2);

  }
  @else if $type == padfull or $type == padinfull {

    $pad: gs-gutter($grid);

  }

  @if $container != false { $pad: gs-adjust($grid, $pad, $container); }

  @if $type == pad or $type == padfull {

    left: #{'-' + $pad + '%'};
    position: relative;

  }
  @else if $type == padin or $type == padinfull {

    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;

  }

  padding-left: #{$pad + '%'};
  padding-right: #{$pad + '%'};

}

@mixin gs-float($grid, $direction, $container: false){
	
  $margin: gs-gutter($grid);
  @if $container != false { $margin: gs-adjust($grid, $margin, $container); }
	
  clear: none;
  float: $direction;
  
  @if $direction == left {
  
    margin-left: 0;
    margin-right: #{$margin + '%'};
  	
  }
  @else if $direction == right {
  
    margin-right: 0;
    margin-left: #{$margin + '%'};
  	
  }
  
}