<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE Chapter PUBLIC "-//Springer-Verlag//DTD A++ V2.4//EN" "http://devel.springer.de/A++/V2.4/DTD/A++V2.4.dtd"> <Chapter  Language="En" OutputMedium="All" ID="b9781430247227_8"><ChapterInfo Language="En" ChapterType="OriginalPaper" NumberingStyle="ChapterOnly" TocLevels="0" ContainsESM="No" OutputMedium="All"><ChapterID>8</ChapterID><ChapterNumber>Chapter 8</ChapterNumber><ChapterDOI>10.1007/9781430247227_8</ChapterDOI><ChapterSequenceNumber>0</ChapterSequenceNumber><ChapterTitle Language="En">Integrating CSS3 Animation with Responsive Web Design<IndexTerm><Primary>Responsive Web Design (RWD)</Primary></IndexTerm><IndexTerm><Primary> RWD</Primary><SeeAlso><Emphasis Type="Italic">See</Emphasis> Responsive Web Design</SeeAlso></IndexTerm> and JavaScript</ChapterTitle><ChapterFirstPage>117</ChapterFirstPage><ChapterLastPage>134</ChapterLastPage><ChapterCopyright><CopyrightHolderName>Springer-Verlag</CopyrightHolderName><CopyrightYear><?InsertOnReleaseOF CopyrightYear?></CopyrightYear></ChapterCopyright><ChapterHistory><OnlineDate><Year><?InsertOnReleaseOF OFYear?></Year><Month><?InsertOnReleaseOF OFMonth?></Month><Day><?InsertOnReleaseOF OFDay?></Day></OnlineDate></ChapterHistory></ChapterInfo><ChapterHeader><Abstract ID="Abs1" Language="En" OutputMedium="Online"><Heading>Abstract</Heading><Para>Now it&#x2019;s time to bring all the elements you&#x2019;ve looked at so far together on your web pages. To do this you will integrate CSS3 Transforms, Transitions, and Animations with current site development principles, including Responsive Web Design (RWD).</Para></Abstract></ChapterHeader><Body><Para>Now it&#x2019;s time to bring all the elements you&#x2019;ve looked at so far together on your web pages. To do this you will integrate CSS3 Transforms, Transitions, and Animations with current site development principles, including Responsive Web Design (RWD).</Para><Para>At a basic level, a responsive site will consist of a fluid design, with most elements measured in percentages, <Emphasis FontCategory="NonProportional">rem</Emphasis>, <Emphasis FontCategory="NonProportional">em</Emphasis>, <Emphasis FontCategory="NonProportional">vh</Emphasis>, or <Emphasis FontCategory="NonProportional">vw</Emphasis> units, rather than pixels, combined with a series of CSS <Emphasis Type="Italic">breakpoints</Emphasis> defined in CSS media queries. The position of these breakpoints is usually defined by the values at which the page design &#x201C;breaks&#x201D; when the width of the browser (more correctly referred to as a <Emphasis Type="Italic">viewport</Emphasis>) changes. For convenience, these values are usually measured in pixels, although there are good arguments for measuring in rems or ems to break away as much as possible from the concept of &#x201C;screen sizes.&#x201D;</Para><Para>Designing a site with responsive web design principles allows visitors to have a smooth, continuous, and uninterrupted experience with every device they use to access it: desktop browser, tablet, mobile phone, and devices yet to come.</Para><Para>It&#x2019;s a good practice to designate breakpoints at the widths where your design fails, rather than use the set display dimensions of the latest iPhone or iPad model. Mobile devices change rapidly, and there is much more variety in smartphone and tablet dimensions, particularly in the Android market, than most people realize. It&#x2019;s far better to have the site respond to dimensions that are relevant to your design, rather than the arbitrary resolutions of this year&#x2019;s technology.</Para><Para>At each breakpoint, you specify changes in layout: elements are resized or repositioned, and appear or disappear. A <Emphasis Type="Italic">mobile first</Emphasis> philosophy reverses the typical development process: from its inception you design a site for small screens (with a horizontal resolution of 320 pixels or less) and adapt the page as the viewport widens, allowing the site more room to &#x201C;breathe.&#x201D; Mobile first has the advantage of enabling you to concentrate development on features that the site absolutely needs, given the severely restricted space and bandwidth of most mobile devices.</Para><FormalPara Type="Important" RenderingStyle="Style1"><Heading>Note</Heading><Para>As a rule, mobile users should have exactly the same access to the tools, navigation, and features of a website as they would when using the site with a desktop browser. Before dropping a feature for mobile users in a responsive site, consider whether the component is needed at all.</Para></FormalPara><Para>Many web developers think of responsive web design purely in terms of <Emphasis FontCategory="NonProportional">@media</Emphasis> queries. While queries are a very important component, and will be the focus here, it&#x2019;s important to understand that many responsive solutions will require additional contributions from JavaScript and server-side solutions such as PHP (typically referred to as <Emphasis Type="Italic">RESS: Responsive Design + Server-Side Components</Emphasis>).</Para><Para>What I will concentrate on in this chapter is the use of CSS animations to ease the transition between breakpoints in a responsive page. It should be noted that while designers <Emphasis Type="Italic">love</Emphasis> this stuff &#x2014;you&#x2019;ll likely find yourself constantly pulling the lower-right corner of the browser window back and forth to appreciate the effects you&#x2019;re about to create&#x2014;many of your users will never see it. Most visitors will come to a website with their browser at a set width and leave it unchanged for the duration of their visit, especially mobile users, who do not have an option of changing viewport sizes. Many of the techniques you&#x2019;ll explore in this chapter should therefore be considered &#x201C;nice to have&#x201D; rather than required.</Para><Para>Later in the chapter, you&#x2019;ll look at how JavaScript can be integrated with CSS3 Animations and Transitions<IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>JavaScript</Secondary></IndexTerm> to make them more effective and efficient.</Para><Section1 ID="Sec1"><Heading>Resizing Elements in Responsive Web Design Without Transitions</Heading><Para>Using the principles I discussed above you can &#x201C;animate&#x201D; a web page&#x2019;s content on viewport resize without using transitions or keyframe animations at all.</Para><Section2 ID="Sec2"><Heading>Dynamically Resizing Images and Videos<IndexTerm><Primary>Responsive Web Design (RWD)</Primary><Secondary>without transitions</Secondary><Tertiary>resize image and video</Tertiary></IndexTerm></Heading><Para>First, you&#x2019;ll resize images and videos in response to viewport size (see Figure <InternalRef RefID="Fig1">8-1</InternalRef>).<Figure ID="Fig1" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 8-1</CaptionNumber>.&#x2002;<CaptionContent><SimplePara>Two states of a responsive image within a page</SimplePara></CaptionContent></Caption><MediaObject ID="MO1"><ImageObject FileRef="9781430247227_Fig08-01.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para><Para>By sizing elements relative to their containers, you can smoothly &#x201C;animate&#x201D; the size of the elements as the browser window is resized. Technically, this isn&#x2019;t animation at all. At this stage, you&#x2019;re simply sizing an image dynamically by scaling it relative to its container (see Listing 8-1).</Para><Para><Emphasis Type="BoldItalic">Listing 8-1.</Emphasis>&#x2002;<Emphasis Type="Italic">A Responsive Image</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">html { font-size: 62.5%; }</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">p { font-size: 1rem; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">.left { max-width: 100%; height: auto; float: left; margin-right: 2rem; margin-bottom: 1rem; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;section&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;p&#x003E;&#x003C;img src=&quot;pentacon-bike.jpg&quot; alt=&quot;Pentacon Bike&quot; class=&quot;left&quot;&#x003E;Lorem ipsum dolor sit amet. &#x2009;. &#x2009;.</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/section&#x003E;</Emphasis></Para><Para>As they resize the browser users will have the impression that the image (supplied by filtran, <ExternalRef><RefSource>www.flickr.com/photos/filtran/2978448269/</RefSource><RefTarget TargetType="URL" Address="http://www.flickr.com/photos/filtran/2978448269/"/></ExternalRef>) is being dynamically resized. The photograph will be displayed at its natural size if the browser is set wide enough, but will scale to fit viewport widths that cannot contain its full dimension.</Para><Para>There are two possible drawbacks to this approach: depending on the initial native size of the image relative to the body text, the image may appear out-of-scale at large or small screen widths. Alternatively, you can set the image as a percentage of the width of its container, so that it scales down through the entire range of the viewport. For example, let&#x2019;s say that you&#x2019;ve determined that a decent overall size for the paragraphs is 900 pixels wide, with 90 characters per measure (line of text). Given the presentational rule for the HTML and paragraphs, this means that the width of the section element would equate to 90rem. The natural size of the image is 425 pixels wide. To make the image completely scalable, you translate all of these values to percentages:</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">425 / 900 = 0.4722</Emphasis></Para><Para>This means that the image takes up 47.22% of the width of the paragraphs and translates to the CSS you see in Listing 8-2.</Para><Para><Emphasis Type="BoldItalic">Listing 8-2.</Emphasis>&#x2002;<Emphasis Type="Italic">An Alternate Responsive Image</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">section { max-width: 90rem; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">.left { width: 47.22%; height: auto; float: left; margin-right: 2.5%; margin-bottom: 2%; }</Emphasis></Para><Para>This combination of CSS declarations will create the appearance of the page shown in Figure <InternalRef RefID="Fig2">8-2</InternalRef>.<Figure ID="Fig2" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 8-2</CaptionNumber>.&#x2002;<CaptionContent><SimplePara>An alternate responsive image</SimplePara></CaptionContent></Caption><MediaObject ID="MO2"><ImageObject FileRef="9781430247227_Fig08-02.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para><Para>The one remaining problem is the potential for very large or very small images to be created at extreme viewport sizes. You might wish to protect the design by setting minimum and maximum sizes to the image (see Listing 8-3).</Para><Para><Emphasis Type="BoldItalic">Listing 8-3.&#x2002;</Emphasis><Emphasis Type="Italic">A Responsive Image with a Minimum and Maximum Size</Emphasis><IndexTerm><Primary>Responsive Web Design (RWD)</Primary><Secondary>without transitions</Secondary><Tertiary>image in minimum and maximum</Tertiary></IndexTerm></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">.left { width: 47.22%; height: auto; float: left;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">margin-right: 2.5%; margin-bottom: 2%;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">max-width: 425px; min-width: 150px;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para>You can achieve the same effect on <Emphasis FontCategory="NonProportional">&#x003C;video&#x003E;</Emphasis> elements using the same technique. (Making a video responsive when it is embedded via a service such as YouTube or Vimeo is significantly trickier; I&#x2019;d recommend Dave Ruppert&#x2019;s FitVids JQuery plugin at <ExternalRef><RefSource>http://fitvidsjs.com/</RefSource><RefTarget TargetType="URL" Address="http://fitvidsjs.com/"/></ExternalRef> to achieve that).</Para><FormalPara Type="Important" RenderingStyle="Style1"><Heading>Tip</Heading><Para>It&#x2019;s also possible to resize text dynamically without using keyframes, transitions, or media queries. The <Emphasis FontCategory="NonProportional">vw</Emphasis> unit measures the viewport width: <Emphasis FontCategory="NonProportional">1vw</Emphasis> is 1/100<Superscript>th</Superscript> of the width of the browser window. So if the viewport is 400 pixels wide, <Emphasis FontCategory="NonProportional">1vw</Emphasis> would be equivalent to <Emphasis FontCategory="NonProportional">4px</Emphasis>. You can use this unit to scale your text as the browser resizes:</Para></FormalPara><Para Type="Programcode"><Emphasis FontCategory="NonProportional">h1 { font-size: 4vw; }</Emphasis></Para><FormalPara Type="Important" RenderingStyle="Style1"><Para>With this CSS, h1 elements on the web page will resize as the browser expands and contracts. You can also use vh and vw on other elements as well.</Para></FormalPara></Section2><Section2 ID="Sec3"><Heading>Responsive Background Images<IndexTerm><Primary>Responsive Web Design (RWD)</Primary><Secondary>without transitions</Secondary><Tertiary>background image</Tertiary></IndexTerm></Heading><Para>You can easily resize background images dynamically in response to viewport changes by using the <Emphasis FontCategory="NonProportional">background-size</Emphasis> property (here using an image by Vinoth Chandar at <ExternalRef><RefSource>www.flickr.com/photos/vinothchandar/6168933212/</RefSource><RefTarget TargetType="URL" Address="http://www.flickr.com/photos/vinothchandar/6168933212/"/></ExternalRef>) as in Listing 8-4.</Para><Para><Emphasis Type="BoldItalic">Listing 8-4.</Emphasis>&#x2002;<Emphasis Type="Italic">A Responsive Background Image</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">html, body { min-height: 100%; font-size: 62.5%; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">body { background-image: url(fog.jpg); background-size: cover; }</Emphasis> &#x2009;</Para><Para>Combined with some body text, this gives the effect shown in Figure <InternalRef RefID="Fig3">8-3</InternalRef>.<Figure ID="Fig3" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 8-3</CaptionNumber>.&#x2002;<CaptionContent><SimplePara>A responsive background image</SimplePara></CaptionContent></Caption><MediaObject ID="MO3"><ImageObject FileRef="9781430247227_Fig08-03.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para><Para>For other ways to &#x201C;transition&#x201D; background images, see Chapter 3.</Para></Section2></Section1><Section1 ID="Sec4"><Heading>Resizing Elements in Responsive Web Design with Transitions<IndexTerm><Primary>Responsive Web Design (RWD)</Primary><Secondary>with transitions</Secondary></IndexTerm></Heading><Para>It&#x2019;s entirely possible to transition elements between @media query breakpoints. From a design perspective, the major issue to be aware of is the element&#x2019;s potential &#x201C;jump&#x201D; between states on viewport resize, which may be surprising to the user.</Para><Para>Let&#x2019;s create a design that has a large h1 element in the middle of the page, above a photograph (Listing 8-5).</Para><Para><Emphasis Type="BoldItalic">Listing 8-5.</Emphasis>&#x2002;<Emphasis Type="Italic">HTML for a Responsive Background Image and Transitioned Text</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">body { background-image: url(fog.jpg); background-size: cover;</Emphasis></Para><Para Type="Programcode">     <Emphasis FontCategory="NonProportional">background-repeat: no-repeat; color: #fff; font-family: Avenir, Arial, sans-serif;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">h1 { font-family: &#x0027;Calluna Sans&#x0027;, Arial, sans-serif; text-align: center;</Emphasis></Para><Para Type="Programcode">      <Emphasis FontCategory="NonProportional">font-size: 10rem; margin: 8rem auto;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para>As the viewport narrows, the heading text will naturally break at spaces, as shown in Figure <InternalRef RefID="Fig4">8-4</InternalRef>.<Figure ID="Fig4" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 8-4</CaptionNumber>.&#x2002;<CaptionContent><SimplePara>A nonresponsive heading element breaking on spaces under a narrow viewport</SimplePara></CaptionContent></Caption><MediaObject ID="MO4"><ImageObject FileRef="9781430247227_Fig08-04.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para><Para>If instead we wanted to keep the heading on a single line, we could reduce the size of the text at the breakpoints and transition between them as shown in Listing 8-6.</Para><Para><Emphasis Type="BoldItalic">Listing 8-6.</Emphasis>&#x2002;<Emphasis Type="Italic">HTML for a Responsive Background Image and Transitioned Text</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">h1 { font-family: &#x0027;Calluna Sans&#x0027;, Arial, sans-serif;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">text-align: center; font-size: 10rem; margin: 8rem auto; transition: 1s font-size linear;</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">@media screen and (max-width: 1100px) {</Emphasis> &#x2009;</Para><Para Type="Programcode">        <Emphasis FontCategory="NonProportional">h1 { font-size: 8rem; }</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">@media screen and (max-width: 900px) {</Emphasis> &#x2009;</Para><Para Type="Programcode">        <Emphasis FontCategory="NonProportional">h1 { font-size: 7rem; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">@media screen and (max-width: 800px) {</Emphasis> &#x2009;</Para><Para Type="Programcode">        <Emphasis FontCategory="NonProportional">h1 { font-size: 6rem; }</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para>The code shown in Listing 8-6 gives you the result shown in Figure <InternalRef RefID="Fig5">8-5</InternalRef>.<Figure ID="Fig5" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 8-5</CaptionNumber>.&#x2002;<CaptionContent><SimplePara>A responsive heading element</SimplePara></CaptionContent></Caption><MediaObject ID="MO5"><ImageObject FileRef="9781430247227_Fig08-05.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para></Section1><Section1 ID="Sec5"><Heading>Indicating Viewport Size with CSS3 Media Queries and Transitions<IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>viewport Size </Secondary></IndexTerm></Heading><Para>Using media queries, you can trigger an element to &#x201C;morph&#x201D; in appearance as the browser is narrowed&#x2014;for example, to show different viewing modes in a responsive page, so that users understand that they are not looking at a simple interpretation of a desktop site on a mobile platform, but at a page that is customizing itself to the size of the browser window (see Figure <InternalRef RefID="Fig6">8-6</InternalRef>).<Figure ID="Fig6" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 8-6</CaptionNumber>.&#x2002;<CaptionContent><SimplePara>A responsive transitioned symbol in three different states, representing three different viewport sizes</SimplePara></CaptionContent></Caption><MediaObject ID="MO6"><ImageObject FileRef="9781430247227_Fig08-06.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para><Para>First of all, you will set up a series of breakpoints:<UnorderedList Mark="Bullet"><ItemContent><Para>120em wide and above will be considered &#x201C;widescreen&#x201D;.</Para></ItemContent><ItemContent><Para>At 80em wide you can assume the user is viewing the site with a tablet.</Para></ItemContent><ItemContent><Para>At 40em and below you should assume the user is using a smartphone.</Para></ItemContent></UnorderedList></Para><Para>Next you create the elements that will be used to show these various states from pure CSS. There will be a total of three elements: a containing <Emphasis FontCategory="NonProportional">div</Emphasis> with an absolute position that will keep all of the elements in the top-right corner of the screen; a <Emphasis FontCategory="NonProportional">span</Emphasis> representing the display, and another <Emphasis FontCategory="NonProportional">span</Emphasis> representing the base or button, as shown in Listing 8-7.</Para><Para><Emphasis Type="BoldItalic">Listing 8-7.&#x2002;</Emphasis><Emphasis Type="Italic">HTML Code for a Transitioned Display Mode in a Responsive Page</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;div id=&quot;viewingmode&quot;&#x003E;</Emphasis></Para><Para Type="Programcode">        <Emphasis FontCategory="NonProportional">&#x003C;span id=&quot;display&quot;&#x003E;&#x003C;/span&#x003E;</Emphasis></Para><Para Type="Programcode">        <Emphasis FontCategory="NonProportional">&#x003C;span id=&quot;buttonbase&quot;&#x003E;&#x003C;/span&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/div&#x003E;</Emphasis></Para><Para>Next, you&#x2019;ll create the base CSS for the elements in Listing 8-8. This will include the transition settings.</Para><Para><Emphasis Type="BoldItalic">Listing 8-8.&#x2002;</Emphasis><Emphasis Type="Italic">CSS Code to Create Viewing Mode Symbols in a Responsive Design</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">* { box-sizing: border-box; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">body { font-family: Avenir, sans-serif; margin: 100px 0; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">#viewingmode {</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">width: 150px; height: 150px; background: rgba(0,0,0,0.2);</Emphasis> &#x2009;</Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">position: absolute; top: 0; right: 0; text-align: center;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode"> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">/* screen, in default widescreen presentation */</Emphasis></Para><Para Type="Programcode"> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">#display {</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">width: 80%; height: 50%; border: 12px solid #585858;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">border-radius: 5px; margin-top: 20px; background-color: #eee;</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode"> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">/* base, in default monitor stand - keyboard configuration */</Emphasis></Para><Para Type="Programcode"> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">#buttonbase {</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">width: 90px; border: 12px solid #585858; border-radius: 5px;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">position: absolute; top: 100px; left: 30px; transform-origin: 25px 5px;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">#display, #buttonbase { display: inline-block; transition: .5s all linear; }</Emphasis></Para><Para>Finally, you&#x2019;ll create the media queries to change the appearance of the <Emphasis FontCategory="NonProportional">#display</Emphasis> and <Emphasis FontCategory="NonProportional">#buttonbase</Emphasis> elements (Listing 8-6). Note that these alterations cascade: smaller screen sizes will inherit the changes made in media queries for larger screens.</Para><Para><Emphasis Type="BoldItalic">Listing 8-6.</Emphasis>&#x2002;<Emphasis Type="Italic">CSS Code to Create Viewing Mode Symbols in a Responsive Design</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">@media screen and (max-width: 80em) {</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">#display { width: 50%; height: 60%; border: 10px solid #585858; }</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">#buttonbase { width: 8px; height: 8px; border: none;</Emphasis> &#x2009;</Para><Para Type="Programcode">        <Emphasis FontCategory="NonProportional">border-radius: 50%; background: #fff; top: 101px; left: 70px; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">@media screen and (max-width: 40em) {</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">#display { border-width: 23px 5px; width: 45%; height: 73%; }</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">#buttonbase { top: 110px;	}</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para>As noted, most users&#x2014;especially mobile users&#x2014;will not see these animations because mobile devices have fixed screen widths and nothing to adjust to. An alternative approach might be to show whether the screen is being held in portrait or landscape mode, as shown in Listing 8-7.</Para><Para><Emphasis Type="BoldItalic">Listing 8-7.&#x2002;</Emphasis><Emphasis Type="Italic">Media Queries to Show Landscape and Portrait Mode on a Device</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">@media screen and (orientation: landscape) and (max-width: 80em) {</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">#display { transform: rotate(90deg);    }</Emphasis> &#x2009;</Para><Para Type="Programcode">   <Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode"> &#x2009;</Para><Para>This creates the changing displays you see illustrated in Figure <InternalRef RefID="Fig6">8-6</InternalRef>, with each device &#x201C;morphing&#x201D; into the next as the viewport is resized based on the orientation of the device. The same principles can be applied to animate many different aspects of web pages with responsive design.</Para></Section1><Section1 ID="Sec6"><Heading>Optimizing CSS Transitions and Animations for Mobile Devices<IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary> Optimizing of</Secondary></IndexTerm></Heading><Para>It is inevitable that the processors in mobile devices will grow faster and more powerful over time, but they will always lag behind the abilities of full desktop models. It is also inevitable that developers will tend to code for the platform in front of their noses, rather than what their audience may be using (as we saw during the browser wars and in vendor prefix biases). Developers write code for the screen in front of them, the result of which may not always scale down to the more restricted abilities of mobile devices.</Para><Para>There are several possible ways to improve CSS effects that run slow on mobile devices: <IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>effect on mobile devices</Secondary></IndexTerm><UnorderedList Mark="Bullet"><ItemContent><Para><Emphasis Type="Italic">Try to funnel transitions and optimizations through the GPU of the device</Emphasis>: Due to their more complex and demanding nature, many browsers will attempt to smooth 3D transforms, transitions, and animations (covered in Chapter 9) by pipelining them through the specialized Graphic Processing Unit of the device on which the CSS animation is running. You can hitch a ride on this optimized stream by starting a CSS declaration block with an &#x201C;empty&#x201D; 3D manipulation that will not visually alter the element, but will allow access to the GPU to the 2D transforms that follow in the same declaration:</Para></ItemContent></UnorderedList></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">transform: translate3d(0,0,0);</Emphasis></Para><FormalPara Type="Important" RenderingStyle="Style1"><Heading>Note</Heading><Para>Remy Sharp has a very effective video showing the advantage of funneling transitions and optimizations through a device&#x2019;s GPU on YouTube at <ExternalRef><RefSource>www.youtube.com/watch?v=IKl78ZgJzm4</RefSource><RefTarget TargetType="URL" Address="http://www.youtube.com/watch?v=IKl78ZgJzm4"/></ExternalRef>.<UnorderedList Mark="Bullet"><ItemContent><Para><Emphasis Type="Italic">Limit or substitute animations with media queries</Emphasis>: You can set up more limited versions of animations for mobile devices by creating different versions under an <Emphasis FontCategory="NonProportional">@media</Emphasis> query.</Para></ItemContent><ItemContent><Para><Emphasis Type="Italic">Ensure that pages containing animated elements will scale down completely to mobile screen sizes</Emphasis>: Animations that are cut off at the edges will obviously not look good or perform effectively on a mobile device.</Para></ItemContent></UnorderedList></Para></FormalPara></Section1><Section1 ID="Sec7"><Heading>Integrating CSS3 Media Queries with SVG<IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary> SVG file</Secondary></IndexTerm></Heading><Para>You can also use media queries (among other CSS3 features) to target elements in SVG.</Para><Para>Just like Adobe PhotoShop and other graphics applications, SVG includes the concept of multiple layers. This means you can merge multiple drawings into one SVG file and switch the visibility of each using CSS.</Para><Para>Let&#x2019;s return to the idea of placing icons in the top-right corner of the browser window, but make them SVG instead; in this case, a series of grouped SVG drawings of different body types, including the <Emphasis Type="Italic">mesomorph</Emphasis> and <Emphasis Type="Italic">ectomorph</Emphasis> types. For the sake of space, code for only the first body type is shown in the simplified Listing 8-8.</Para><Para><Emphasis Type="BoldItalic">Listing 8-8.</Emphasis>&#x2002;<Emphasis Type="Italic">SVG File of Multiple Drawing Layers</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;svg version=&quot;1.1&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;142px&quot; height=&quot;340px</Emphasis><Emphasis FontCategory="NonProportional">&quot;</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">viewBox=&quot;0 0 142 340&quot;&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;style&#x003E;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">g { visibility: hidden;  }</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">g:target  { visibility: visible;  }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/style&#x003E;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">&#x003C;g id=&quot;ectomorph&quot;&#x003E;</Emphasis></Para><Para Type="Programcode">            <Emphasis FontCategory="NonProportional">&#x003C;path d=&quot;M11.356,682.57c5.297,6.354,10.253,10.084,17.781,14.844</Emphasis></Para><Para Type="Programcode">             <Emphasis FontCategory="NonProportional">C18.907,694.043,15.905,690.475,11.356,682.57z&quot;/&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">. &#x2009;. &#x2009;. &#x2009;.</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">&#x003C;/g&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;g id=&quot;mesomorph&quot;&#x003E;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">&#x003C;path d=&quot;M9.981,679.538c0,0-8.719,7.188-8.719,17.125 . &#x2009;. &#x2009;.&quot; /&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">. &#x2009;. &#x2009;. &#x2009;.</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/g&#x003E;</Emphasis><Figure ID="Fig7" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 8-7</CaptionNumber>.&#x2002;<CaptionContent><SimplePara><Emphasis Type="Italic">Different named layers of an SVG vector drawing superimposed on each other</Emphasis></SimplePara></CaptionContent></Caption><MediaObject ID="MO7"><ImageObject FileRef="9781430247227_Fig08-07.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para><Para>Each of the grouped SVG drawings is layered on top of one another, as shown in Figure <InternalRef RefID="Fig7">8-7</InternalRef>. The layers are then hidden with CSS. The next line in the embedded stylesheet turns on the visibility of a group if a URL targets it. You can use CSS to place the SVG file as a background image in a <Emphasis FontCategory="NonProportional">div</Emphasis>, as shown in Listing 8-9.</Para><Para><Emphasis Type="BoldItalic">Listing 8-9.</Emphasis>&#x2002;<Emphasis Type="Italic">SVG File of Multiple Drawing Layers</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">div#shapes { background-image: url(&#x0027;bodyshapes.svg#mesomorph&#x0027;);</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">position: absolute; top: 0; right: 0; width: 145px; height: 355px;  }</Emphasis></Para><Para>Using the same targeting technique, you can swap the visibility of the layers in the SVG file used in the background image of the <Emphasis FontCategory="NonProportional">div</Emphasis> (Listing 8-10).</Para><Para><Emphasis Type="BoldItalic">Listing 8-10.&#x2002;</Emphasis><Emphasis Type="Italic">SVG File of Multiple Drawing Layers</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">@media screen and (max-width: 1000px) {</Emphasis> &#x2009;</Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">div#shapes { background-image: url(&#x0027;bodyshapes.svg#ectomorph); }</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para>Finally, it should be noted that SVG elements can be animated in and of themselves with the <Emphasis FontCategory="NonProportional">&#x003C;animate /&#x003E;</Emphasis> element, The visibility of each layer can be animated with transitions if the SVG was inserted directly on the page, rather than having been used as a background image.</Para></Section1><Section1 ID="Sec8"><Heading>Triggering CSS3 Transitions with JavaScript<IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>JavaScript</Secondary><Tertiary>triggering</Tertiary></IndexTerm></Heading><Para>JavaScript can be used to trigger transitions and animations in CSS3. For example, you could have elements fade in when users reaches the bottom of a page to increase their interest in related content (see Figure <InternalRef RefID="Fig8">8-8</InternalRef>). CSS cannot detect the state of the scrollbar&#x2014;you need to use JavaScript to do that and then animate the elements that appear using CSS3.<Figure ID="Fig8" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 8-8</CaptionNumber>.&#x2002;<CaptionContent><SimplePara>Footer elements animated with CSS transitions triggered by JQuery<IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>JavaScript</Secondary><Tertiary>JQuery</Tertiary></IndexTerm></SimplePara></CaptionContent></Caption><MediaObject ID="MO8"><ImageObject FileRef="9781430247227_Fig08-08.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para><FormalPara Type="Important" RenderingStyle="Style1"><Heading>Note</Heading><Para>There is an argument to be made that if you&#x2019;re initiating an animation with JavaScript, you might as well continue to create the animation in that same language. However, as discussed in Chapter 1, CSS3 transitions will be smoother and more efficient, and will achieve a higher frame rate than what you can achieve in JavaScript. There is a reason libraries such as JQuery Transit (<ExternalRef><RefSource>http://ricostacruz.com/jquery.transit/</RefSource><RefTarget TargetType="URL" Address="http://ricostacruz.com/jquery.transit/"/></ExternalRef>) and Move.js (<ExternalRef><RefSource>http://visionmedia.github.com/move.js</RefSource><RefTarget TargetType="URL" Address="http://visionmedia.github.com/move.js"/></ExternalRef>) are increasingly being used to hook JavaScript into CSS3 &#x00AD;Transition and Animation methods. This separation of functions reflects a separation between content, presentation, and behavior: in this example, JavaScript is used to detect DOM events, and CSS is used to present <Emphasis Type="Italic">changes in appearance</Emphasis> to that content.</Para></FormalPara><Para>First, let&#x2019;s assume that you have more than enough content to fill the viewport: I&#x2019;ll show a heading and a fragment of <Emphasis Type="Italic">Lorem ipsum</Emphasis> filler text in Listing 8-11 to indicate the start of the body text. At the very bottom of the page you&#x2019;ll have two links inside a <Emphasis FontCategory="NonProportional">footer</Emphasis> element. The first link will lead the user to content that is logically &#x201C;previous&#x201D; to the page they are currently on; the second link, to the right, will direct them to the &#x201C;next&#x201D; page after the current one. I&#x2019;ve used Unicode black left- and right-pointing triangle shapes inside the links to save space: you should use the appropriate HTML entities <Emphasis FontCategory="NonProportional">(&#9664;</Emphasis> and <Emphasis FontCategory="NonProportional">&#9654;</Emphasis> respectively) instead.</Para><Para><Emphasis Type="BoldItalic">Listing 8-11.</Emphasis>&#x2002;<Emphasis Type="Italic">HTML Code for an Extra-Long Page with Content in a Footer Engaged with JavaScript and CSS3 Transitions</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">. &#x2009;. &#x2009;.</Emphasis></Para><Para Type="Programcode">   <Emphasis FontCategory="NonProportional">&#x003C;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js&quot;&#x003E;&#x003C;/script&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/head&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;body&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;article&#x003E;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">&#x003C;header&#x003E;&#x003C;h1&#x003E;A History of the Roman Empire&#x003C;/h1&#x003E;&#x003C;/header&#x003E;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">&#x003C;p&#x003E;Lorem ipsum dolor sit amet, consectetur adipiscing elit. &#x2009;. &#x2009;.</Emphasis></Para><Para Type="Programcode"> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;footer id=&quot;articlefooter&quot;&#x003E;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">&#x003C;a href=# id=prevpage&#x003E;</Emphasis>&#x25C0;<Emphasis FontCategory="NonProportional">&#x003C;img src=cicero.png alt=Cicero&#x003E;Cicero and Claudius&#x003C;/a&#x003E;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">&#x003C;a href=# id=nextpage&#x003E;Caligula and Ceasar &#x003C;img src=caesar.png alt=Caeasar&#x003E;</Emphasis>&#x25B6;<Emphasis FontCategory="NonProportional">&#x003C;/a&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/footer&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/article&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/body&#x003E;</Emphasis></Para><Para>The <Emphasis FontCategory="NonProportional">footer</Emphasis> should be pushed below the bottom edge of the viewport window by the content in the article. You&#x2019;re going to style the page, indenting the links in the <Emphasis FontCategory="NonProportional">footer</Emphasis> slightly and making them invisible by lowering their opacity (Listing 8-12).</Para><Para><Emphasis Type="BoldItalic">Listing 8-12.&#x2002;</Emphasis><Emphasis Type="Italic">Base CSS Code for a Page with Footer Navigation</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">body { font-family: Avenir, sans-serif; margin: 100px 0; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">article { width: 768px; margin: 0 auto; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">footer#articlefooter { padding: 0 25px; }</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">footer#articlefooter a {</Emphasis> &#x2009;</Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">text-decoration: none; color: #000; opacity: 0;  position: relative;</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">footer#articlefooter a img { width: 77px; height: 77ps; vertical-align: middle; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">a#prevpage { padding-left: 70px; float: left; transition: 1s 1s opacity linear, 1s 1s translateX &#xF0C9;linear; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">a#nextpage { padding-right: 70px; float: right; transition: 1s .5s opacity linear, 1s 1s &#xF0C9; translateX linear; }</Emphasis></Para><Para>You&#x2019;ve associated the CSS3 transition code with the links: if they are fired at the same time, <Emphasis FontCategory="NonProportional">.linkmoveright</Emphasis>, associated with the <Emphasis FontCategory="NonProportional">#nextarticle</Emphasis> element, will move first. After a short delay, it will be followed by the <Emphasis FontCategory="NonProportional">.linkmoveleft</Emphasis> class, associated with <Emphasis FontCategory="NonProportional">#prevarticle</Emphasis>.</Para><Para>Note that you have made the transition more efficient by declaring the properties you are changing: because they are multiple properties, you use a repetition separated by a comma.</Para><Para>Rather than associate the changes to the elements that will be initiated by your transitions with a <Emphasis FontCategory="NonProportional">:hover</Emphasis> or <Emphasis FontCategory="NonProportional">:focus</Emphasis> pseudo-selector, you&#x2019;re going to define them as a new class (see Listing 8-13).</Para><Para><Emphasis Type="BoldItalic">Listing 8-13.&#x2002;</Emphasis><Emphasis Type="Italic">Transforms for Footer Navigational Elements</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">.linkmoveleft { transform: translateX(-70px); opacity: 1; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">.linkmoveright  { transform: translateX(70px);  opacity: 1; }</Emphasis></Para><Para>Finally, you&#x2019;re going to add a script at the very bottom of the page that will look at a few variables and judge when to add these classes to the elements.</Para><Para>As used in Listing 8-14, the <Emphasis FontCategory="NonProportional">articleheight</Emphasis> variable determines the overall height of the body, including all of its content. <Emphasis FontCategory="NonProportional">scrollTop</Emphasis> measures how many pixels of the page are <Emphasis Type="Italic">above</Emphasis> the top edge of the browser window: this will be <Emphasis FontCategory="NonProportional">0</Emphasis> when the page loads, with the value increasing as the user scrolls down. By dividing <Emphasis FontCategory="NonProportional">articleheight</Emphasis> by 2 and comparing the result to <Emphasis FontCategory="NonProportional">scrollTop,</Emphasis> you can determine when the user has scrolled through half the page and then apply the classes (Listing 8-14).</Para><Para><Emphasis Type="BoldItalic">Listing 8-14.</Emphasis>&#x2002;<Emphasis Type="Italic">JQuery Code to Place Classes on Navigational Footer Elements</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;script&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">$(function() {</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">var articleheight = $(&quot;body&quot;).height();</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">$(window).scroll(function() {</Emphasis></Para><Para Type="Programcode">        <Emphasis FontCategory="NonProportional">if ($(this).scrollTop() &#x003E; (articleheight / 2)) {</Emphasis> &#x2009;</Para><Para Type="Programcode">              <Emphasis FontCategory="NonProportional">$(&quot;#prevpage&quot;).toggleClass(&quot;linkmoveleft&quot;);</Emphasis> &#x2009;</Para><Para Type="Programcode">              <Emphasis FontCategory="NonProportional">$(&quot;#nextpage&quot;).toggleClass(&quot;linkmoveright&quot;);</Emphasis></Para><Para Type="Programcode">         &#x2009;</Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">});</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">});</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/script&#x003E;</Emphasis></Para><Para>CSS3 transitions will fire in response to <Emphasis Type="Italic">any</Emphasis> appropriate change in the state of the elements they are associated with , whether those changes are imposed by CSS, JavaScript, or anything else. In this case, the placing of new classes that contain changes to the elements&#x2019; opacity and position with JQuery is enough to set off the transitions.</Para><Para>While this works, looking at the results critically reveals that the approach has several possible drawbacks:<UnorderedList Mark="Bullet"><ItemContent><Para>Particularly long articles may feature body text that is more than twice the height of the browser window. The comparison in the script in Listing 8-14 means that for such articles the transitions may fire before the user has reached the bottom of the page (i.e., after reading more than half the article they still may not see the footer).</Para></ItemContent><ItemContent><Para>The <Emphasis FontCategory="NonProportional">toggleClass</Emphasis> function means that JQuery will try to undo the application of the classes when the user scrolls upward and fire them again when the user returns to the bottom of the page. Such repeated transitions could prove annoying.</Para></ItemContent><ItemContent><Para>Finally, we are assuming that the footer will always be congruent with the bottom of the page. This is not necessarily true: there may be comments beneath the footer, which would extend the overall height of the article significantly, causing the JavaScript to apply the classes early.</Para></ItemContent></UnorderedList></Para><FormalPara Type="Important" RenderingStyle="Style1"><Heading>Note</Heading><Para>Under the HTML5 specification, article elements nested inside another article are assumed to contain commentary on the parent.</Para></FormalPara><Para>As an alternative approach, apply the transitions just once when the footer is clearly on the page (Listing 8-15).</Para><Para><Emphasis Type="BoldItalic">Listing 8-15.</Emphasis>&#x2002;<Emphasis Type="Italic">Improved JQuery Code to Place Classes on Navigational Footer Elements</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">$(function() {</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">var footerBottom = $(&quot;#articlefooter&quot;).offset().top + $(&quot;#articlefooter&quot;).height();</Emphasis> &#x2009;</Para><Para Type="Programcode">       <Emphasis FontCategory="NonProportional">$(window).scroll(function() {</Emphasis></Para><Para Type="Programcode">            <Emphasis FontCategory="NonProportional">if ($(this).scrollTop() &#x003E; (footerBottom - $(window).height())) {</Emphasis> &#x2009;</Para><Para Type="Programcode">                     <Emphasis FontCategory="NonProportional">$(&quot;#prevpage&quot;).addClass(&quot;linkmoveleft&quot;);</Emphasis> &#x2009;</Para><Para Type="Programcode">                     <Emphasis FontCategory="NonProportional">$(&quot;#nextpage&quot;).addClass(&quot;linkmoveright&quot;);</Emphasis> &#x2009;</Para><Para Type="Programcode">                 <Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode">           <Emphasis FontCategory="NonProportional">});</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">});</Emphasis></Para><Para>If you wanted to support Internet Explorer 6 through 8, you could use Modernizr (<ExternalRef><RefSource>http://modernizr.com/</RefSource><RefTarget TargetType="URL" Address="http://modernizr.com/"/></ExternalRef>) to detect browser support of CSS transitions. If the browser lacked support, JQuery could fall back on animating the elements itself (see Listing 8-16).</Para><Para><Emphasis Type="BoldItalic">Listing 8-16.</Emphasis>&#x2002;<Emphasis Type="Italic">Improved JQuery Code to Place Classes on Navigational Footer Elements</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;script src=//ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js&#x003E;&#x003C;/script&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;script src=scripts/modernizr.js&#x003E;&#x003C;/script&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/head&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;body&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;article&#x003E;</Emphasis></Para><Para Type="Programcode"> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">. &#x2009;. &#x2009;.</Emphasis></Para><Para Type="Programcode"> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/article&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;script&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">$(function() {</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">var footerBottom = $(&quot;#articlefooter&quot;).offset().top + $(&quot;#articlefooter&quot;).height();</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">$(window).scroll(function() {</Emphasis></Para><Para Type="Programcode">        <Emphasis FontCategory="NonProportional">if ($(this).scrollTop() &#x003E; (footerBottom - $(window).height())) {</Emphasis> &#x2009;</Para><Para Type="Programcode">             <Emphasis FontCategory="NonProportional">if (Modernizr.csstransitions) {</Emphasis></Para><Para Type="Programcode">                         <Emphasis FontCategory="NonProportional">$(&quot;#prevpage&quot;).addClass(&quot;linkmoveleft&quot;);</Emphasis> &#x2009;</Para><Para Type="Programcode">                         <Emphasis FontCategory="NonProportional">$(&quot;#nextpage&quot;).addClass(&quot;linkmoveright&quot;);</Emphasis></Para><Para Type="Programcode">                             <Emphasis FontCategory="NonProportional">} else {</Emphasis> &#x2009;</Para><Para Type="Programcode">                        <Emphasis FontCategory="NonProportional">$(&quot;#prevpage&quot;).animate({ opacity: 1, left: &#x0027;-=70&#x0027;}, 1000, function() { });</Emphasis></Para><Para Type="Programcode">                        <Emphasis FontCategory="NonProportional">$(&quot;#nextpage&quot;).animate({ opacity: 1, left: &#x0027;+=70&#x0027;}, 1000, function() { });</Emphasis></Para><Para Type="Programcode">                           <Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode">                 <Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">});</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">});</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/script&#x003E;</Emphasis></Para><Para>If you wanted to create a more complex effect, you could write keyframe animations and either apply them as classes, as in Listing 8-16, or inject the call to the animations directly using JQuery. For a final example, you will use the latter approach, calling keyframe animations that duplicate the effect you just created with transitions (Listing 8-17).</Para><Para><Emphasis Type="BoldItalic">Listing 8-17.</Emphasis>&#x2002;<Emphasis Type="Italic">JQuery Code Used to Apply CSS3 Animations</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">@keyframes leftmove {</Emphasis> &#x2009;</Para><Para Type="Programcode">        <Emphasis FontCategory="NonProportional">100% { transform: translateX(-70px);  opacity: 1; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode"> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">@keyframes rightmove {</Emphasis> &#x2009;</Para><Para Type="Programcode">        <Emphasis FontCategory="NonProportional">100% { transform: translateX(70px);  opacity: 1; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode"> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;script&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">$(function() {</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">var footerBottom = $(&quot;#articlefooter&quot;).offset().top + $(&quot;#articlefooter&quot;).height();</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">$(window).scroll(function() {</Emphasis></Para><Para Type="Programcode">        <Emphasis FontCategory="NonProportional">if ($(this).scrollTop() &#x003E; (footerBottom - $(window).height())) {</Emphasis> &#x2009;</Para><Para Type="Programcode">              <Emphasis FontCategory="NonProportional">$(&quot;#prevpage&quot;).css(&#x0027;animation&#x0027;, &#x0027;leftmove 1s 2s forwards&#x0027;);</Emphasis></Para><Para Type="Programcode">              <Emphasis FontCategory="NonProportional">$(&quot;#nextpage&quot;).css(&#x0027;animation&#x0027;, &#x0027;rightmove 1s 1s forwards&#x0027;);</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">});</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">});</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/script&#x003E;</Emphasis></Para><FormalPara Type="Important" RenderingStyle="Style1"><Heading>Note</Heading><Para>The technique shown in Listing 8-17 can be used to avoid the semantically questionable approach to interactivity demonstrated in Chapter 4 by using <Emphasis FontCategory="NonProportional">form</Emphasis> label and <Emphasis FontCategory="NonProportional">checkbox</Emphasis> buttons. Rather than jumping through markup hoops to achieve the results you want in CSS, you can simply employ JavaScript to detect DOM events on any element and initiate CSS3 transformations, transitions, and animations on others, as shown in Listing 8-18.</Para></FormalPara><Para><Emphasis Type="BoldItalic">Listing 8-18.</Emphasis>&#x2002;<Emphasis Type="Italic">JQuery Code Used to Apply a CSS3 Animation on Click</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">$(function() {</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">$(&quot;#at&quot;).click(function() { $(&quot;.box&quot;).toggleClass(&quot;wobble&quot;); });</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">});</Emphasis></Para><Para Type="Programcode"> &#x2009;</Para></Section1><Section1 ID="Sec9"><Heading>Customizing CSS3 Transitions with JavaScript<IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>JavaScript</Secondary><Tertiary>random scattered elements</Tertiary></IndexTerm></Heading><Para>In Chapter 6 you looked at animating multiple SVG elements with CSS3. When doing so you encountered a major issue:  to animate elements you had to create them as individual elements on the page, making it difficult to create the appearance of randomness (see Figure <InternalRef RefID="Fig9">8-9</InternalRef>).<Figure ID="Fig9" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 8-9</CaptionNumber>.&#x2002;<CaptionContent><SimplePara>Randomized elements animated with CSS3</SimplePara></CaptionContent></Caption><MediaObject ID="MO9"><ImageObject FileRef="9781430247227_Fig08-09.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para><Para>In an effort to reduce the amount of hand-coding you have to do in any page, you will use JavaScript to solve both of these issues. To keep things simple, you use red <Emphasis FontCategory="NonProportional">div</Emphasis> elements as the animated objects. At the bottom of a page you&#x2019;ll add the script shown in Listing 8-19.</Para><Para><Emphasis Type="BoldItalic">Listing 8-19.&#x2002;</Emphasis><Emphasis Type="Italic">JavaScript Code to Create Random Scattered Elements</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;script&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">var html = [];</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">for (i = 0; i &#x003C; 30; i++) {</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">var randomX = Math.random() * (100 - 1) + 1;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">var randomY = Math.random() * (1200 - 1) + 1;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">var randomZ = Math.random() * (100 - 1) + 1;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">html.push(&#x0027;&#x003C;div style=&quot;left:&#x0027;+randomX+&#x0027;%;top:&#x0027;+randomY+&#x0027;px;width:&#x0027;+randomZ+&#x0027;px;height: &#xF0C9;&#x0027;+randomZ+&#x0027;&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/div&#x003E;&#x0027;);</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">$(&quot;body&quot;).append( html.join(&#x0027;&#x0027;) );</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/script&#x003E;</Emphasis></Para><Para>You use a JavaScript loop to create as many copies of the <Emphasis FontCategory="NonProportional">div</Emphasis> element as you wish. For each element, you&#x2019;ll use three variables to determine its horizontal position, offset from the top edge of the viewport, together with the horizontal and vertical size.</Para><Para>However many elements you have will all follow the same keyframe animation rules shown in Listing 8-20.</Para><Para><Emphasis Type="BoldItalic">Listing 8-20.</Emphasis>&#x2002;<Emphasis Type="Italic">JavaScript Code to Create Random Scattered Elements</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">html { height: 100%; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">body { min-height: 100%; margin: 0; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">@keyframes snowflake {</Emphasis> &#x2009;</Para><Para Type="Programcode">        <Emphasis FontCategory="NonProportional">100% { transform: translateY(1800px) rotate(1200deg);  }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">div { background: red; position: absolute; animation: snowflake 40s linear infinite;  }</Emphasis></Para><Para>Although this works, there are several issues: all of the shapes fall at the same rate, and turn synchronously. An element that is small appears to be further away, and should fall more slowly, while all elements should start at a randomized rotation. In order to achieve this, you&#x2019;ll create several classes that will call the keyframe animation with different timings and apply the classes with JavaScript, based on the element&#x2019;s size (Listing 8-21).</Para><Para><Emphasis Type="BoldItalic">Listing 8-21.&#x2002;</Emphasis><Emphasis Type="Italic">CSS and JavaScript Code to Create Randomized Scattered Elements</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;style&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">@keyframes snowflake {</Emphasis> &#x2009;</Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">100% { transform: translateY(1800px) rotate(1200deg);  }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">div { background: red; position: absolute;</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">animation-name: snowflake;</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">animation-iteration-count: infinite;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">animation-timing-function: linear;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">.small { animation-duration: 40s; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">.medium { animation-duration: 20s; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">.large { animation-duration: 10s; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/style&#x003E;</Emphasis></Para><Para Type="Programcode"> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;body&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">. &#x2009;. &#x2009;.</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/body&#x003E;</Emphasis></Para><Para Type="Programcode"> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;script&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">var html = [];</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">for (i = 0; i &#x003C; 30; i++) {</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">var randomX = Math.random() * (100 - 1) + 1;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">var randomY = Math.random() * (1200 - 1) + 1;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">var randomZ = Math.random() * (100 - 1) + 1;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">var randomR = Math.random() * (360 - 1) + 1;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">var sizes = [&#x0027;small&#x0027;,&#x0027;medium&#x0027;,&#x0027;large&#x0027;];</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">var dim = sizes[Math.round(randomX/50)];</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">html.push(&#x0027;&#x003C;div style=&quot;left:&#x0027;+randomX+&#x0027;%;top:- &#xF0C9;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x0027;+randomY+&#x0027;px;width:&#x0027;+randomZ+&#x0027;px;height:&#x0027;+randomZ+&#x0027;px;transform:translateY(0px) &#xF0C9;</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">rotate(&#x0027;+randomR+&#x0027;deg)&quot; class=&#x0027;+dim+&#x0027;&#x003E;&#x003C;/div&#x003E;&#x0027;);</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">$(&quot;body&quot;).append( html.join(&#x0027;&#x0027;) );</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/script&#x003E;</Emphasis></Para><Para>This JavaScript code is basic and could be taken much further, but the important aspect to be aware of is that you are making use of the core strengths of each of these technologies: you use CSS to provide rules for appearance and JavaScript to make rapid changes to the DOM.</Para></Section1><Section1 ID="Sec10"><Heading>Summary</Heading><Para>This chapter provided an introduction to the integration of CSS3 Animations, Transforms, and Transitions with responsive web design, JavaScript, and SVG. You can create the impression of &#x201C;animated&#x201D; elements in response to viewport resizing by scaling content using percentage and vw units, and using <Emphasis FontCategory="NonProportional">@media</Emphasis> queries to animate elements at breakpoints.</Para><Para>You can also use JavaScript to provide trigger points for animations that CSS itself cannot detect, and use the scripting language to make multiple randomized &#x201C;clones&#x201D; of elements for animation sequences. The integration of these technologies can be taken much further: a good example is Sebastian Markb&#x00E5;ge&#x2019;s solution to the technical difficulty of having an element follow a complex path at a constant rate of motion by using SVG path data to generate keyframe animation declarations (<ExternalRef><RefSource>http://csspathanimation.calyptus.eu/</RefSource><RefTarget TargetType="URL" Address="http://csspathanimation.calyptus.eu/"/></ExternalRef>).</Para><Para>In this book so far, you&#x2019;ve been using CSS3 to move elements across the flat plane surface of the page. In the next chapter, you will manipulate HTML elements in 3D space.</Para></Section1></Body><BodyRef FileRef="9781430247227_08_OnlinePDF.pdf" TargetType="OnlinePDF"/></Chapter>