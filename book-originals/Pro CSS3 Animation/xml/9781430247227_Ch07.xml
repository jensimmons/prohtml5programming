<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE Chapter PUBLIC "-//Springer-Verlag//DTD A++ V2.4//EN" "http://devel.springer.de/A++/V2.4/DTD/A++V2.4.dtd"> <Chapter  Language="En" OutputMedium="All" ID="b9781430247227_7"><ChapterInfo Language="En" ChapterType="OriginalPaper" NumberingStyle="ChapterOnly" TocLevels="0" ContainsESM="No" OutputMedium="All"><ChapterID>7</ChapterID><ChapterNumber>Chapter 7</ChapterNumber><ChapterDOI>10.1007/9781430247227_7</ChapterDOI><ChapterSequenceNumber>0</ChapterSequenceNumber><ChapterTitle Language="En">Integrating CSS3 Animations<IndexTerm><Primary>CSS3 Animations</Primary></IndexTerm> with SVG and Filters</ChapterTitle><ChapterFirstPage>103</ChapterFirstPage><ChapterLastPage>116</ChapterLastPage><ChapterCopyright><CopyrightHolderName>Springer-Verlag</CopyrightHolderName><CopyrightYear><?InsertOnReleaseOF CopyrightYear?></CopyrightYear></ChapterCopyright><ChapterHistory><OnlineDate><Year><?InsertOnReleaseOF OFYear?></Year><Month><?InsertOnReleaseOF OFMonth?></Month><Day><?InsertOnReleaseOF OFDay?></Day></OnlineDate></ChapterHistory></ChapterInfo><ChapterHeader><Abstract ID="Abs1" Language="En" OutputMedium="Online"><Heading>Abstract</Heading><Para>Every browser that supports CSS Transforms, Transitions, and Animations also supports SVG (Scalable Vector Graphics), an image format that has long been neglected by most web developers. After being ignored by Internet Explorer (IE) for a decade, SVG is experiencing something of a renaissance with its support in IE9 and above and in all other modern browsers, making it ideal for deployment in mobile development and other use cases. As you&#x2019;ll see in this chapter, CSS3 transitions and keyframes can integrate with SVG very well.</Para></Abstract></ChapterHeader><Body><Para>Every browser that supports CSS Transforms, Transitions, and Animations also supports SVG (Scalable Vector Graphics), an image format that has long been neglected by most web developers. After being ignored by Internet Explorer (IE) for a decade, SVG is experiencing something of a renaissance with its support in IE9 and all other modern browsers, making it ideal for deployment in mobile development and other use cases. As you&#x2019;ll see in this chapter, CSS3 transitions and keyframes can integrate with SVG very well.</Para><Para>Filters, discussed in the second half of this chapter, are new to CSS but standardized in SVG. In fact, CSS Filters are directly derived from the SVG standard. Filters allow real-time and interactive visual editing of HTML content, particularly images, that was previously achievable only in PhotoShop. As a CSS property, filters can be easily animated, just like anything else.</Para><Section1 ID="Sec1"><Heading>An Introduction to SVG<IndexTerm><Primary>CSS3 Animations</Primary><Secondary>SVG data</Secondary></IndexTerm></Heading><Para>SVG is an open, XML-based format. That fact allows SVG data to be created and altered in an ordinary text editor and in almost any web development language. SVG supports its own gradients, interactivity, text, and layers, but the most important feature for our purposes is the fact that the format describes <Emphasis Type="Italic">vector</Emphasis> shapes. This means that SVG images can be scaled to any size or resolution or transformed in any way without any loss in quality. The fact that the format offers a text-based description of vector information also tends to make SVG files relatively small: a simple UI (user interface) shape such as a play button, for example, can be described in SVG as three points and a fill color, rather than individually-defined pixels. This makes the format naturally responsive and a perfect fit for mobile design, high-DPI displays, and manipulation with CSS.</Para><Para>Consider, for example, a UI play button element. Reduced to its absolute minimum, the SVG code to describe such a shape might be something like Listing 7-1.</Para><Para><Emphasis Type="BoldItalic">Listing 7-1.</Emphasis>&#x2002;<Emphasis Type="Italic">A Simple SVG File</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;svg version=&quot;1.1&quot; xmlns=&quot;</Emphasis><ExternalRef><RefSource><Emphasis FontCategory="NonProportional">http://www.w3.org/2000/svg</Emphasis></RefSource><RefTarget TargetType="URL" Address="http://www.w3.org/2000/svg"/></ExternalRef><Emphasis FontCategory="NonProportional">&quot;&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;polygon points=&quot;0,0 0,400 200,200 &quot;/&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/svg&#x003E;</Emphasis></Para><Para>SVG data can be viewed directly in a browser. Saving the code in Listing 7-1 with the filename <Emphasis FontCategory="NonProportional">play.svg</Emphasis> and loading it into a browser window gives you the visual result shown in Figure <InternalRef RefID="Fig1">7-1</InternalRef>.<Figure ID="Fig1" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 7-1</CaptionNumber>.&#x2002;<CaptionContent><SimplePara><Emphasis Type="Italic">An SVG play button displayed in a browser</Emphasis></SimplePara></CaptionContent></Caption><MediaObject ID="MO1"><ImageObject FileRef="9781430247227_Fig07-01.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para><Para>Note that the SVG polygon element uses points to describe shapes in a way similar to imagemaps. Ultimately, SVG elements must be rendered as pixels by your display, and by default the points specified for the polygon will map to pixels on the screen. (Your play button will be displayed in the browser as 400 pixels high and two hundred pixels wide by default, and will be positioned in the extreme top-left corner of the screen.) Ultimately, the final rendered dimensions of an SVG element are arbitrary: the button could be rendered a mile high (if your screen was large enough) or two centimeters wide (for example, on a printed page) and, all other factors aside, the quality would be the same.</Para><Para>Again, as with imagemaps, it&#x2019;s usually not very efficient to write all of your code by hand for SVG. For many tasks you&#x2019;ll find it considerably easier to use a drawing application and export the result as an SVG file. (I&#x2019;ll discuss these tools shortly.)</Para></Section1><Section1 ID="Sec2"><Heading>Placing SVG on a Web Page<IndexTerm><Primary>CSS3 Animations</Primary><Secondary>placing SVG</Secondary></IndexTerm></Heading><Para>There are three primary methods used to place an SVG file on an HTML page: referenced as an image, inline on your page (also called <Emphasis Type="Italic">embedded</Emphasis> SVG), and referenced as an object.</Para><Section2 ID="Sec3"><Heading>SVG As an Inline Image<IndexTerm><Primary>CSS3 Animations</Primary><Secondary>placing SVG</Secondary><Tertiary>Inline image</Tertiary></IndexTerm></Heading><Para>The method for placing an SVG element into a web page most familiar to web developers is to use the &#x2009;<Emphasis FontCategory="NonProportional">&#x003C;img</Emphasis>&#x003E; &#x2009;tag. Before you do so, your SVG code must contain a little more information as to its &#x201C;natural&#x201D; size (again, keeping the code to an absolute minimum), as shown in Listing 7-2.</Para><Para><Emphasis Type="BoldItalic">Listing 7-2.</Emphasis>&#x2002;<Emphasis Type="Italic">SVG Code Prepared for Insertion on a Web Page As an Image</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;svg version=&quot;1.1&quot; xmlns=&quot;</Emphasis><ExternalRef><RefSource><Emphasis FontCategory="NonProportional">http://www.w3.org/2000/svg</Emphasis></RefSource><RefTarget TargetType="URL" Address="http://www.w3.org/2000/svg"/></ExternalRef><Emphasis FontCategory="NonProportional">&quot; viewBox=&quot;0 0 400 400&quot;&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;polygon points=&quot;0,0 0,400 200,200 &quot; fill=&quot;rgba(90,70,80,0.5)&quot; /&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/svg&#x003E;</Emphasis></Para><Para>The <Emphasis FontCategory="NonProportional">viewBox</Emphasis> attribute specifies a &#x201C;canvas&#x201D; of 400 by 400 pixels. With no width or height specified for the image element in the CSS, the SVG element reserves a &#x201C;space&#x201D; of 400 &#x00D7; 400 pixels for itself when it is placed on your page as an image with standard HTML, shown in Listing 7-3.</Para><Para><Emphasis Type="BoldItalic">Listing 7-3.&#x2002;</Emphasis><Emphasis Type="Italic">An SVG Element Inserted on a Web Page As an Image</Emphasis><IndexTerm><Primary>CSS3 Animations</Primary><Secondary>placing SVG</Secondary><Tertiary>elements</Tertiary></IndexTerm></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;img src=svg/play.svg alt=Play&#x003E;</Emphasis></Para><Para>You can also reference SVG as an image anywhere you would normally use an image in your CSS&#x2014;for example, as a background for an element (Listing 7-4).</Para><Para><Emphasis Type="BoldItalic">Listing 7-4.</Emphasis>&#x2002;<Emphasis Type="Italic">SVG Applied As a Background Image in CSS</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">h1 { background: url(svg/wave.svg); }</Emphasis></Para><Para>While referencing an external SVG file in this way is the simplest and most common method, it does carry several drawbacks:<IndexTerm><Primary>CSS3 Animations</Primary><Secondary>placing SVG</Secondary><Tertiary>drawbacks</Tertiary></IndexTerm><UnorderedList Mark="Bullet"><ItemContent><Para>The SVG file is treated solely as an image; any interactivity or scripts written within the code are ignored.</Para></ItemContent><ItemContent><Para>You can&#x2019;t &#x201C;reach inside&#x201D; the SVG code to directly alter the appearance of elements using CSS with the same degree of freedom you have with inline SVG.</Para></ItemContent></UnorderedList></Para></Section2><Section2 ID="Sec4"><Heading>Inline SVG<IndexTerm><Primary>CSS3 Animations</Primary><Secondary>placing SVG</Secondary><Tertiary>Inline SVG</Tertiary></IndexTerm></Heading><Para>If you embed SVG data directly on your page, you need to include a little more information to the SVG code. You will need to provide the element&#x2019;s width and height either as attributes (<Emphasis FontCategory="NonProportional">viewBox</Emphasis>, <Emphasis FontCategory="NonProportional">width</Emphasis>, or <Emphasis FontCategory="NonProportional">height</Emphasis> attributes) or as a style (see Listing 7-5).</Para><Para><Emphasis Type="BoldItalic">Listing 7-5.</Emphasis>&#x2002;<Emphasis Type="Italic">SVG Applied Inline with HTML</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;!DOCTYPE html&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;html lang=en&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;head&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;meta charset=utf-8&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;title &#x2009;&#x003E; &#x2009;SVG Embedded File Example&#x003C;/title&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/head&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;body&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;h1 &#x2009;&#x003E; &#x2009;Standard content&#x003C;/h1&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;svg version=&quot;1.1&quot; xmlns=&quot;</Emphasis><ExternalRef><RefSource><Emphasis FontCategory="NonProportional">http://www.w3.org/2000/svg</Emphasis></RefSource><RefTarget TargetType="URL" Address="http://www.w3.org/2000/svg"/></ExternalRef><Emphasis FontCategory="NonProportional">&quot; style=&quot;width: 200px; height: 400px&quot;&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;polygon points=&quot;0,0 0,400 200,200&quot;  /&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/svg&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/body&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/html&#x003E;</Emphasis></Para><Para>Inline SVG saves an extra HTTP request, making it particularly important for mobile pages, where lag is prevalent. Other advantages over simply referencing the file as an image are the ability to directly influence the appearance of SVG with CSS. Scripted interactivity with the SVG is also supported.</Para><Para>The primary drawback to inline SVG is the simple fact that it adds more code to your HTML page.</Para></Section2><Section2 ID="Sec5"><Heading>SVG Added As an Object or iframe<IndexTerm><Primary>CSS3 Animations</Primary><Secondary>placing SVG</Secondary><Tertiary>adding object/iframe</Tertiary></IndexTerm></Heading><Para>Adding SVG to a web page as an object or iframe is the oldest method, in which scripted interactivity is retained inside the element (Listing 7-6).</Para><Para><Emphasis Type="BoldItalic">Listing 7-6.</Emphasis>&#x2002;<Emphasis Type="Italic">SVG Applied As an Object or iframe to a Web Page</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;object type=&quot;image/svg &#x2009;+ &#x2009;xml&quot; data=&quot;icon.svg&quot;&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">Warning for older browsers, or alternative content</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/object&#x003E;</Emphasis></Para><Para Type="Programcode"> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;iframe src=&quot;icon.svg&quot;&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">Warning for older browsers, or alternative content</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/iframe&#x003E;</Emphasis></Para><Para>However, applied as an &#x2009;<Emphasis FontCategory="NonProportional">&#x003C;object&#x003E;</Emphasis> &#x2009;or &#x2009;<Emphasis FontCategory="NonProportional">&#x003C;embed</Emphasis>&#x003E; &#x2009;tag, the ability to customize the appearance of the SVG elements is minimized . The &#x2009;<Emphasis FontCategory="NonProportional">&#x003C;object</Emphasis>&#x003E; &#x2009;or &#x2009;<Emphasis FontCategory="NonProportional">&#x003C;embed</Emphasis>&#x003E; &#x2009;tag may also appear with scrollbars if the SVG content overflows its container.</Para></Section2></Section1><Section1 ID="Sec6"><Heading>Manipulating SVG with CSS<IndexTerm><Primary>CSS3 Animations</Primary><Secondary>manipulating SVG</Secondary></IndexTerm></Heading><Para>Just as you can place SVG on a web page in several different ways, so you can manipulate the appearance of an SVG element using several different methods. This is made more complex by the fact that SVG has its own native syntax for achieving some visual effects.</Para><Para>At the simplest level, you can resize an SVG element when it is placed on your page as an image, as shown in Listing 7-7.</Para><Para><Emphasis Type="BoldItalic">Listing 7-7.&#x2002;</Emphasis><Emphasis Type="Italic">Inline CSS Used to Resize an SVG Element</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;img src=play.svg alt=Play style=&quot;width: 50px; height: 50px&quot;&#x003E;</Emphasis></Para><Para>You can also alter the appearance of the element from an embedded or linked style sheet, in the same way that you write presentational rules for any other kind of image. (For this reason, SVG elements used on a page are often given an <Emphasis FontCategory="NonProportional">id</Emphasis> attribute.)</Para><Para>You can change the fill color of an SVG shape natively inside the SVG file, using <Emphasis FontCategory="NonProportional">fill</Emphasis> (see Listing 7-8). (Note that <Emphasis FontCategory="NonProportional">fill</Emphasis> can take any color value used in CSS: keyword, hexadecimal, rgb, or hsl).</Para><Para><Emphasis Type="BoldItalic">Listing 7-8.</Emphasis>&#x2002;<Emphasis Type="Italic">Fill Attribute Used to Color an SVG Polygon Element</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;polygon points=&quot;0,0 0,400 200,200 &quot; fill=&quot;red&quot; /&#x003E;</Emphasis></Para><Para>You can also change the fill color using an embedded stylesheet in the SVG file (Listing 7-9).</Para><Para><Emphasis Type="BoldItalic">Listing 7-9.</Emphasis>&#x2002;<Emphasis Type="Italic">Modifying the Appearance of an SVG Element with an Embedded Stylesheet</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;svg version=&quot;1.1&quot; xmlns=&quot;</Emphasis><ExternalRef><RefSource><Emphasis FontCategory="NonProportional">http://www.w3.org/2000/svg</Emphasis></RefSource><RefTarget TargetType="URL" Address="http://www.w3.org/2000/svg"/></ExternalRef><Emphasis FontCategory="NonProportional">&quot; viewBox=&quot;0 0 400 400&quot;&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;style type=&quot;text/css&quot;&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">polygon { fill: blue; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/style&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;polygon points=&quot;0,0 0,400 200,200&quot; /&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/svg&#x003E;</Emphasis></Para><Para>Finally, you can also accomplish this via your CSS, if the SVG file is embedded directly in your page (Listing 7-10).</Para><Para><Emphasis Type="Italic">Listing 7-10.&#x2002;Modifying the Appearance of an Inline SVG Element with an Embedded Stylesheet</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;!DOCTYPE html&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;html lang=en&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;head&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;meta charset=utf-8&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;title &#x2009;&#x003E; &#x2009;SVG Embedded File Example&#x003C;/title&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;style&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">polygon { fill: red; stroke: black; stroke-width: 9px;  }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/style&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/head&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;body&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;svg version=&quot;1.1&quot; xmlns=&quot;</Emphasis><ExternalRef><RefSource><Emphasis FontCategory="NonProportional">http://www.w3.org/2000/svg</Emphasis></RefSource><RefTarget TargetType="URL" Address="http://www.w3.org/2000/svg"/></ExternalRef><Emphasis FontCategory="NonProportional">&quot; style=&quot;width: 200px; height: 400px&quot;&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;polygon points=&quot;10,19 10,390 190,200&quot;  /&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/svg&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/body&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/html&#x003E;</Emphasis></Para><Para>Note that this does not mean that you somehow magically have new stroke or fill properties for any HTML element, much as you might wish it. These properties are very specifically applied to SVG content only.</Para><Para>You can also detect hover on SVG elements, and change the appearance of the SVG content in response (Listing 7-11).</Para><Para><Emphasis Type="Italic">Listing 7-11.&#x2002;CSS Hover Detection on an SVG Element</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">polygon { fill: red; stroke: black; stroke-width: 9px;  }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">polygon:hover { fill: black; }</Emphasis></Para><Para>Note one small but significant advantage to using inline SVG for the button: the &#x201C;hot spot&#x201D; area for hover is exactly the shape of the polygon. On a standard bitmap image, the area is always rectangular, no matter how the shape of the image might appear.</Para><Para>This means that you can also transition these effects, as you can with any other element influenced by CSS. To make the CSS clearer and more specific, I&#x2019;ve added an <Emphasis FontCategory="NonProportional">id</Emphasis> to the polygon element and addressed it that way in my styles, as shown in Listing 7-12. (Note that I&#x2019;ve also brought the polygon &#x201C;in&#x201D; a little from the edges, as stroke is added to the outside of the shape, in the same way that CSS border is to HTML elements. Without this, the tips of the stroke would be cut off by the edges of the SVG &#x201C;canvas&#x201D; as it extended beyond them).</Para><Para><Emphasis Type="BoldItalic">Listing 7-12.&#x2002;</Emphasis><Emphasis Type="Italic">CSS Transition on an SVG Element</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;!DOCTYPE html&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;html lang=en&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;head&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;meta charset=utf-8&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;title &#x2009;&#x003E; &#x2009;SVG Embedded File Example&#x003C;/title&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;style&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">#play { fill: red; stroke: black; stroke-width: 9px;  transition: 1s all linear; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">#play:hover { fill: black; stroke: black; stroke-width: 9px;  }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/style&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/head&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;body&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;svg version=&quot;1.1&quot; xmlns=&quot;</Emphasis><ExternalRef><RefSource><Emphasis FontCategory="NonProportional">http://www.w3.org/2000/svg</Emphasis></RefSource><RefTarget TargetType="URL" Address="http://www.w3.org/2000/svg"/></ExternalRef><Emphasis FontCategory="NonProportional">&quot; style=&quot;width: 200px; height: 400px&quot;&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;polygon id=&quot;play&quot; points=&quot;10,19 10,390 190,200&quot;  /&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/svg&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/body&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/html&#x003E;</Emphasis></Para><Para>Any CSS3 transform, transition, or animation that can be applied to an HTML element can also be applied to SVG, making the combination of vector shapes and CSS extremely powerful.</Para><Section2 ID="Sec7"><Heading>An Animated SVG Imagemap<IndexTerm><Primary>CSS3 Animations</Primary><Secondary>manipulating SVG</Secondary><Tertiary>imagemap</Tertiary></IndexTerm></Heading><Para>In this exercise, you&#x2019;ll use SVG to duplicate the functionality of an HTML imagemap UI, but you&#x2019;ll add several evolutionary steps: sections of your SVG &#x201C;imagemap&#x201D; will mask image content that will be transitioned in with CSS3 on hover over the appropriate areas (see Figure <InternalRef RefID="Fig2">7-2</InternalRef>).<Figure ID="Fig2" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 7-2</CaptionNumber>.&#x2002;<CaptionContent><SimplePara><Emphasis Type="Italic">An SVG imagemap</Emphasis></SimplePara></CaptionContent></Caption><MediaObject ID="MO2"><ImageObject FileRef="9781430247227_Fig07-02.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para><Para>First, you need an SVG drawing. Thankfully, there is a great deal of free SVG content available online: in this case, I will use a map of Canada supplied by Wikimedia Commons. For the purpose of illustration, I&#x2019;ve edited the map down to just the provinces of British Columbia, Alberta and Saskatchewan.</Para><Para>Each province is demarked by a path, supplied as a string of coordinates. We&#x2019;ll start with inlining the SVG in our page and creating a simple hover effect on each path. The result will look something like Listing 7-13.</Para><Para><Emphasis Type="BoldItalic">Listing 7-13.&#x2002;</Emphasis><Emphasis Type="Italic">Simple Highlight on an SVG Imagemap</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;!DOCTYPE html&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;html lang=en&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;head&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;meta charset=utf-8&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;title &#x2009;&#x003E; &#x2009;SVG Embedded File Example&#x003C;/title&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;style&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">path { fill: #fdfdfd; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">path:hover { fill: red; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/style&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/head&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;body&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;svg version=&quot;1.1&quot;  xmlns:svg=</Emphasis><ExternalRef><RefSource><Emphasis FontCategory="NonProportional">http://www.w3.org/2000/svg</Emphasis></RefSource><RefTarget TargetType="URL" Address="http://www.w3.org/2000/svg"/></ExternalRef></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">xmlns=&quot;</Emphasis><ExternalRef><RefSource><Emphasis FontCategory="NonProportional">http://www.w3.org/2000/svg</Emphasis></RefSource><RefTarget TargetType="URL" Address="http://www.w3.org/2000/svg"/></ExternalRef><Emphasis FontCategory="NonProportional">&quot; xmlns:xlink=&quot;</Emphasis><ExternalRef><RefSource><Emphasis FontCategory="NonProportional">http://www.w3.org/1999/xlink</Emphasis></RefSource><RefTarget TargetType="URL" Address="http://www.w3.org/1999/xlink"/></ExternalRef><Emphasis FontCategory="NonProportional">&quot; x=&quot;0px&quot; y=&quot;0px&quot;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">width=&quot;1000px&quot; height=&quot;600px&quot; viewBox=&quot;0 0 1000 660&quot;&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;path id=&quot;alberta&quot; d=&quot;M1654.393,678.219 . &#x2009;. &#x2009;.&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;path id=&quot;british-columbia&quot; d=&quot;M982.854,27.912l150.51,33.221c17.. &#x2009;. &#x2009;.&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">. &#x2009;. &#x2009;.</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/svg&#x003E;</Emphasis></Para><Para>To achieve the mask effect, you&#x2019;re going to embed each &#x201C;show through&#x201D; image after each path, and then turn the path into a clipPath. You&#x2019;ll associate the elements together by referencing the id of the appropriate clipping path for the image and group the elements together with &#x2009;<Emphasis FontCategory="NonProportional">&#x003C;g&#x003E;</Emphasis> &#x2009;.</Para><Para>The beginning code for the SVG image, including the path for Alberta, will look something like Listing 7-14.</Para><Para><Emphasis Type="Italic">Listing 7-14.&#x2002;SVG Clipping Path for an Image</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;g&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;clipPath id=&quot;ab-clipper&quot;&#x003E;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">&#x003C;path fill=&quot;#D3D3D3&quot; d=&quot;M1654.393,678.219 . &#x2009;. &#x2009;.&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/clipPath&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;image clip-path=&quot;url(#ab-clipper)&quot; height=&quot;100%&quot; width=&quot;100%&quot; x=&quot;800&quot; y=&quot;50&quot;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">xlink:href=&quot;lake-louise.jpeg&quot; preserveAspectRatio=&quot;xMidYMin slice&quot; /&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/g&#x003E;</Emphasis></Para><Para><Emphasis FontCategory="NonProportional">clipPath</Emphasis> defines the path within it to act as a mask for the elements that reference the <Emphasis FontCategory="NonProportional">clipPath id</Emphasis>, as the <Emphasis FontCategory="NonProportional">lake-loise.jpe</Emphasis>g image does. The image element is cross-linked to a bitmap picture in the same location as the map. The image is set to its full &#x201C;natural&#x201D; width and height and moved on the x and y axis until it is in the same location as the path. (It&#x2019;s likely that you&#x2019;ll need to set the link to the clipping path as the last action you take with the image; otherwise, you&#x2019;ll be playing a guessing game as to the position of the image while it is masked and likely invisible).</Para><Para>So now you have created a masked bitmap image. The CSS to reveal this portion of the map (Listing 7-15) is simple.</Para><Para><Emphasis Type="BoldItalic">Listing 7-15.</Emphasis>&#x2002;<Emphasis Type="Italic">CSS to Show a Clipped Image on Hover in an SVG Element</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">svg image { opacity: 0; transition: 400ms opacity ease; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">svg image:hover { opacity: 1; }</Emphasis></Para><Para>There&#x2019;s just one problem: the clipping path is invisible, which means that there is an Alberta-sized gap in your map. The hover effect works, but the user won&#x2019;t see where to move their mouse if you apply the same effect to the other province paths. Once it is turned into a clip, the fill on the path is useless. You can change the color all day, and never see any difference.</Para><Para>The solution is to place a filled copy of the path <Emphasis Type="Italic">between</Emphasis> the clipping path and the image in the code, as shown in Listing 7-16.</Para><Para><Emphasis Type="BoldItalic">Listing 7-16.</Emphasis>&#x2002;<Emphasis Type="Italic">A clipped Area Made Visible in SVG with the Addition of a Copied Filled Path</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;g&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;clipPath id=&quot;ab-clipper&quot;&#x003E;</Emphasis></Para><Para Type="Programcode">       <Emphasis FontCategory="NonProportional">&#x003C;path fill=&quot;#D3D3D3&quot; d=&quot;M1654.393,678.219 . &#x2009;. &#x2009;.&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/clipPath&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;path fill=&quot;#FF0000&quot; d=&quot;M1654.393,678.219. &#x2009;. &#x2009;. /&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;image clip-path=&quot;url(#ab-clipper)&quot; height=&quot;100%&quot; width=&quot;100%&quot; x=&quot;800&quot; y=&quot;50&quot;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">xlink:href=&quot;wheat.jpeg&quot; preserveAspectRatio=&quot;xMidYMin slice&quot; /&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/g&#x003E;</Emphasis></Para><Para>The bitmap image (by Kenny Louie, licensed under Creative Commons: <ExternalRef><RefSource>http://flickr.com/photos/kwl/3102355428</RefSource><RefTarget TargetType="URL" Address="http://flickr.com/photos/kwl/3102355428"/></ExternalRef>) is still invisible, but it is rendered &#x201C;above&#x201D; the copied path, so it still shows when the user hovers their mouse over the area filled with the copied path.</Para><Para>The final step is linking each of the areas in the SVG image. The link goes inside each group in the SVG file itself and requires use of the <Emphasis FontCategory="NonProportional">xlink</Emphasis> namespace (Listing 7-17).</Para><Para><Emphasis Type="BoldItalic">Listing 7-17.</Emphasis>&#x2002;<Emphasis Type="Italic">A Linked Clipped Image in SVG</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;g&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;a xlink:href=&quot;</Emphasis> <ExternalRef><RefSource><Emphasis FontCategory="NonProportional">http://www.hellobc.com/</Emphasis></RefSource><RefTarget TargetType="URL" Address="http://www.hellobc.com/"/></ExternalRef><Emphasis FontCategory="NonProportional">&quot;&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;clipPath id=&quot;bc-clipper&quot;&#x003E;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">&#x003C;path d=&quot; M982.854,27.912l150.51,33.221c17.. &#x2009;. &#x2009;.&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/clipPath&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;path id=&quot;british-columbia&quot; d=&quot;M982.854,27.912l150.51,33.221c17.. &#x2009;. &#x2009;.&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;image clip-path=&quot;url(#bc-clipper)&quot; height=&quot;100%&quot; width=&quot;100%&quot; x=&quot;80&quot; y=&quot;50&quot;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">xlink:href=&quot;false-creek.jpeg&quot; preserveAspectRatio=&quot;xMidYMin slice&quot; /&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/a&#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;/g&#x003E;</Emphasis></Para><Para>Note that the area of the link follows the edge of the path, just as real imagemaps do, and the transition happens within the same area.</Para></Section2><Section2 ID="Sec8"><Heading>SVG Snowflake Animation<IndexTerm><Primary>CSS3 Animations</Primary><Secondary>manipulating SVG</Secondary><Tertiary>snowflake</Tertiary></IndexTerm></Heading><Para>The scalability of vector shapes means that you can use multiple copies of an SVG element at different sizes without worrying about image quality. I&#x2019;ll demonstrate this by animating vector snowflakes for a seasonal background scene. (For this, I&#x2019;ll use a slightly modified SVG snowflake downloaded from Wikimedia Commons at <ExternalRef><RefSource>http://upload.wikimedia.org/wikipedia/commons/5/50/Snow_flake.svg</RefSource><RefTarget TargetType="URL" Address="http://upload.wikimedia.org/wikipedia/commons/5/50/Snow_flake.svg"/></ExternalRef>. See Figure <InternalRef RefID="Fig3">7-3</InternalRef>.)<Figure ID="Fig3" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 7-3</CaptionNumber>.&#x2002;<CaptionContent><SimplePara><Emphasis Type="Italic">Still from an SVG falling snowflake animation</Emphasis></SimplePara></CaptionContent></Caption><MediaObject ID="MO3"><ImageObject FileRef="9781430247227_Fig07-03.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para><Para>First, you&#x2019;re going to place the snowflake onto the page as multiple images. The flakes will be different sizes and will start in different locations, but they will share the same animation characteristics: they will fall down from the sky, drifting laterally in the breeze as they do so. (See Listing 7-18.)</Para><Para><Emphasis Type="BoldItalic">Listing 7-18.&#x2002;</Emphasis><Emphasis Type="Italic">SVG Snowflakes Placed As Images on a Page</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;img src=&quot;snowflake.svg&quot; alt=&quot;&quot; class=&quot;flake&quot; style=&quot;top: -50px&quot; &#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;img src=&quot;snowflake.svg&quot; alt=&quot;&quot; class=&quot;flake&quot; style=&quot;left: 200px; width: 60px; height: 60px; top: -120px;&quot; &#x003E;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;img src=&quot;snowflake.svg&quot; alt=&quot;&quot; class=&quot;flake&quot; style=&quot;left: 640px; width: 120px; height: 120px; top: -400px;&quot; &#x003E;</Emphasis></Para><Para>Next, you&#x2019;ll apply the CSS to create the impression of a winter sky through a gradient and create a base size for the snowflakes. At the same time, you&#x2019;ll call on two keyframe sequences: one to spin the snowflakes as they fall toward the bottom (called snow) and another to drift the snowflakes from side to side (drift). (See Listing 7-19.)</Para><Para><Emphasis Type="BoldItalic">Listing 7-19.</Emphasis>&#x2002;<Emphasis Type="Italic">Base CSS for a Snowflake Animation</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">html { min-height: 100%; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">body { height: 100%; background: linear-gradient(#b5d3ff, #30509a); }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">img.flake { width: 150px; height: 150px; position: relative;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">animation: snow 8s linear infinite forwards,</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">drift 12s ease-in-out forwards infinite; }</Emphasis></Para><Para>The keyframe sequences run at different lengths, and each snowflake starts at a different height (Listing 7-20); the combination creates the impression of random cycled motion.</Para><Para><Emphasis Type="BoldItalic">Listing 7-20.&#x2002;</Emphasis><Emphasis Type="Italic">Keyframe Sequences for a Snowflake Animation</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">@keyframes snow {</Emphasis></Para><Para Type="Programcode">   <Emphasis FontCategory="NonProportional">100% { top: 700px; transform: rotate(2.2turn);  }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode"> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">@keyframes drift {</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">0% { left: -5px; }</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">25% { left: 55px; }</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">55% { left: -15px; }</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">100% { left: 0px; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para>This works, but as you can see, there are two issues. The first is that, to add more snowflakes, you need to add more images to the markup, which quickly becomes tiring. The second issue is the fact that smaller snowflakes will be interpreted as being farther away, and so should take longer to fall off the bottom of the screen (which, for this example, let&#x2019;s assume is 700 pixels high). You can call on the snowflakes through the use of added classes with different timings for the motion, shown in Listing 7-21.</Para><Para><Emphasis Type="BoldItalic">Listing 7-21.</Emphasis>&#x2002;<Emphasis Type="Italic">Slowing Animation by Creating Secondary Classes</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">img.flake { width: 150px; height: 150px; position: relative;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">animation: snow 8s linear infinite forwards,</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">drift 12s ease-in-out forwards infinite;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">img.slow {</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">animation: snow 16s linear infinite forwards,</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">drift 24s ease-in-out forwards infinite;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para>Separate classes means that a slower snowflake could be controlled by calling on two classes. Creating more variation would mean creating more classes, which returns to the same problem as with adding more snowflakes. You&#x2019;ll address this issue when you start integrating JavaScript with CSS3 animations in Chapter 9.</Para></Section2></Section1><Section1 ID="Sec9"><Heading>Tools for SVG<IndexTerm><Primary>CSS3 Animations</Primary><Secondary>SVG tools </Secondary></IndexTerm></Heading><Para>Right now one of the biggest obstacles to widespread use of SVG is the relative paucity of design tools. The most popular include:<UnorderedList Mark="Bullet"><ItemContent><Para>Adobe Illustrator has an SVG export option but, as with many WYSIWYG tools, the code it creates is not terribly efficient: generated SVG files usually contain far more code than is necessary.</Para></ItemContent><ItemContent><Para>Inkscape (<ExternalRef><RefSource>http://inkscape.org/</RefSource><RefTarget TargetType="URL" Address="http://inkscape.org/"/></ExternalRef>), the open source alternative, shares the same issue as Adobe Illustrator. Inkscape does, however, have the advantage of working with native SVG files and it supports SVG filters.</Para></ItemContent><ItemContent><Para>Rapha&#x00EB;l is a small JavaScript library that enables easy SVG creation and manipulation from within JavaScript.</Para></ItemContent></UnorderedList></Para><Section2 ID="Sec10"><Heading>Introduction to CSS3 Filters<IndexTerm><Primary>CSS3 Animations</Primary><Secondary>filters</Secondary></IndexTerm></Heading><Para>CSS Filters allow the processing of web content before it appears on the page. Most commonly (but by no means exclusively), these filters are applied to bitmap images. Filters significantly alter the typical web development image production workflow: rather than permanently &#x201C;baking in&#x201D; visual effects in the pixels of an image, designers can optimize and export an image from PhotoShop that will remain relatively untouched, leaving visual changes to CSS.</Para><Para>This means that images can be altered on the fly in CSS, rather than having to re-edit originals in PhotoShop, export them, and then re-upload them to a server. It also means that these effects can be animated.</Para><Section3 ID="Sec11"><Heading>Black and White/Grayscale Filter Transition<IndexTerm><Primary>CSS3 Animations</Primary><Secondary>filters</Secondary><Tertiary>Grayscale filter transition</Tertiary></IndexTerm></Heading><Para>The grayscale filter effect is ideal for online portfolios or photographic galleries. Rather than using complex JavaScript or Flash solutions, a CSS filter can easily convert a color image to black and white. You can undo this conversion on hover, and attach a transition to ease between the two states, as with the image shown in Figure <InternalRef RefID="Fig4">7-4</InternalRef> (by Andrew Larsen at <ExternalRef><RefSource>www.flickr.com/photos/papalars/4013594219</RefSource><RefTarget TargetType="URL" Address="http://www.flickr.com/photos/papalars/4013594219"/></ExternalRef>, licensed under Creative Commons). See Listing 7-22.<Figure ID="Fig4" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 7-4</CaptionNumber>.&#x2002;<CaptionContent><SimplePara><Emphasis Type="Italic">A color image (right) filtered with CSS (left)</Emphasis></SimplePara></CaptionContent></Caption><MediaObject ID="MO4"><ImageObject FileRef="9781430247227_Fig07-04.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para><Para><Emphasis Type="Italic">Listing 7-22.&#x2002;Applying a Grayscale Filter Transition</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">img { border: 20px solid #fff; box-shadow: 10px 10px 8px rgba(0,0,0,0.3); }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">img.bw { filter: grayscale(1); transition: 1s filter linear; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">img.bw:hover { filter: grayscale(0); }</Emphasis></Para><Para Type="Programcode"> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;img src=lake-louise.jpg alt=&quot;Lake Louise, Alberta, Canada&quot; class=bw&#x003E;</Emphasis></Para><Para>As with the other filters I&#x2019;ll describe in this chapter, the grayscale filter takes values between 0 (no effect) and 1 (full effect) with floating point values between. Note that you cannot transition smoothly to a state of &#x201C;none&#x201D; or no filter applied; the filter must be given a fresh value.</Para></Section3><Section3 ID="Sec12"><Heading>Sepia Filter Transition<IndexTerm><Primary>CSS3 Animations</Primary><Secondary>filters</Secondary><Tertiary>sepia filter transition</Tertiary></IndexTerm></Heading><Para>The sepia filter can be used to create an &#x201C;aged&#x201D; photo effect, as shown in Figure <InternalRef RefID="Fig5">7-5</InternalRef> (applied to a photograph by Robb North, <ExternalRef><RefSource>www.flickr.com/photos/robbn1/3650713106</RefSource><RefTarget TargetType="URL" Address="http://www.flickr.com/photos/robbn1/3650713106"/></ExternalRef>) .<Figure ID="Fig5" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 7-5</CaptionNumber>.&#x2002;<CaptionContent><SimplePara><Emphasis Type="Italic">A color image (right) filtered with CSS (left)</Emphasis></SimplePara></CaptionContent></Caption><MediaObject ID="MO5"><ImageObject FileRef="9781430247227_Fig07-05.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para><Para>The code to achieve the effect shown Figure <InternalRef RefID="Fig5">7-5</InternalRef> is very similar to grayscale (see Listing 7-23).</Para><Para><Emphasis Type="Italic">Listing 7-23.&#x2002;CSS to Transition a Sepia Filter on an Image</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">img { border: 20px solid #fff; box-shadow: 10px 10px 8px rgba(0,0,0,0.3); }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">img.old { filter: sepia(1); transition: 1s filter linear; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">img.old:hover { filter: sepia(0); }</Emphasis></Para><Para Type="Programcode"> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;img src=barn.jpg alt=&quot;Old barn&quot; class=old&#x003E;</Emphasis></Para><Para>While the barn photograph in Figure <InternalRef RefID="Fig5">7-5</InternalRef> had previously been processed in an image editor to add &#x201C;weathering&#x201D; and a partial vignette appearance, you&#x2019;ve only used CSS to provide a sepia tone to the image. The other effects can also be added with CSS.</Para></Section3><Section3 ID="Sec13"><Heading>Developing Polaroid Photo Effect<IndexTerm><Primary>CSS3 Animations</Primary><Secondary>filters</Secondary><Tertiary>polaroid photo effect</Tertiary></IndexTerm></Heading><Para>It&#x2019;s possible to combine both a filter and a <Emphasis FontCategory="NonProportional">box-shadow</Emphasis> with an <Emphasis FontCategory="NonProportional">inset</Emphasis> value to re-create the appearance of a developing Polaroid photograph by surrounding an image with a <Emphasis FontCategory="NonProportional">div</Emphasis> and animating the style applied to the container element. The image held inside it will need to be &#x201C;pushed back&#x201D; by using <Emphasis FontCategory="NonProportional">z-index</Emphasis> so that the inset inner shadow of the <Emphasis FontCategory="NonProportional">div</Emphasis> overlays it (see Listing 7-24).</Para><Para><Emphasis Type="Italic">Listing 7-24.&#x2002;CSS to Transition an Image with a Polaroid Effect</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">div.polaroid { float: left; border: 25px solid #f3f4e3; border-bottom-width: 45px;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">box-shadow: 0 0 200px 200px rgba(29,25,4,1) inset;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">filter: sepia(.8);  transition: 3s all ease-in;  }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">div.polaroid img { position: relative; z-index: -1; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">div.polaroid:hover { filter: sepia(.2); box-shadow: 0 0 50px 0 rgba(29,25,4,0.2) inset }</Emphasis></Para><Para Type="Programcode"> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">&#x003C;div class=&quot;polaroid&quot; &#x2009;&#x003E; &#x2009;&#x003C;img src=&quot;barn.jpg&quot; alt=&quot;Photograph of an old barn&quot; &#x2009;&#x003E; &#x2009;&#x003C;/a&#x003E;</Emphasis></Para></Section3><Section3 ID="Sec14"><Heading>Blur Filter Transition<IndexTerm><Primary>CSS3 Animations</Primary><Secondary>filters</Secondary><Tertiary>blur filter transition</Tertiary></IndexTerm></Heading><Para>Blur filters need to be used carefully; applying them excessively can make a website difficult to read or interact with. Blur is one of the few filters that does not take a value between 0 and 1. Instead, it uses a length measurement to set the blur amount. (See Figure <InternalRef RefID="Fig6">7-6</InternalRef>, which uses another Creative Commons image by Louise Docker, <ExternalRef><RefSource>www.flickr.com/photos/aussiegall/6311469113</RefSource><RefTarget TargetType="URL" Address="http://www.flickr.com/photos/aussiegall/6311469113"/></ExternalRef><Emphasis FontCategory="NonProportional">.</Emphasis>)<Figure ID="Fig6" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 7-6</CaptionNumber>.&#x2002;<CaptionContent><SimplePara><Emphasis Type="Italic">A color image (right) filtered with CSS blur (left)</Emphasis></SimplePara></CaptionContent></Caption><MediaObject ID="MO6"><ImageObject FileRef="9781430247227_Fig07-06.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para><Para>Note that the blur effect extends all the way through the image, including the border and shadow. It is possible to limit the extent of the blur by making the border and shadow the properties of a second, parent element, such as a <Emphasis FontCategory="NonProportional">div</Emphasis>. (See Listing 7-25.)</Para><Para><Emphasis Type="Italic">Listing 7-25.&#x2002;CSS to Apply a Blur Filter to an Image</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">img { border: 20px solid #fff; box-shadow: 10px 10px 8px rgba(0,0,0,0.3); }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">img.old { filter: blur(2px); transition: 1s filter linear; }</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">img.old:hover { filter: blur(0px); }</Emphasis></Para></Section3></Section2></Section1><Section1 ID="Sec15"><Heading>Summary</Heading><Para>SVG and filters are two of the most powerful features you can add to CSS animations. SVG allows resolution-free transitions and animations, while filters allow fast client-side visual image processing.</Para><Para>SVG is a dozen years old; CSS filters are brand new. Both are immediately limited by the fact that what you create with them is unitary: your creations can&#x2019;t immediately be repeated. Animating one element on a screen is easy, and you can reuse that animation to animate another element, but each new element must be created separately.</Para><Para>You can use JavaScript to simplify, empower, and vary your CSS3 Animations and Transitions, easily replicating animated elements and making new animations with a power that you&#x2019;ll explore in the next chapter.</Para></Section1></Body><BodyRef FileRef="9781430247227_07_OnlinePDF.pdf" TargetType="OnlinePDF"/></Chapter>