<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE Chapter PUBLIC "-//Springer-Verlag//DTD A++ V2.4//EN" "http://devel.springer.de/A++/V2.4/DTD/A++V2.4.dtd"> <Chapter  Language="En" OutputMedium="All" ID="Chap0001"><ChapterInfo Language="En" ChapterType="OriginalPaper" NumberingStyle="Unnumbered" TocLevels="0" ContainsESM="No" OutputMedium="All"><ChapterID>1</ChapterID><ChapterDOI>10.1007/978-1-4302-4722-7_1</ChapterDOI><ChapterSequenceNumber>0</ChapterSequenceNumber><ChapterTitle Language="En"><Emphasis Type="Bold">chapter 1CSS3 Fundamentals</Emphasis><IndexTerm><Primary>Cascading style sheets (CSS)</Primary></IndexTerm></ChapterTitle><ChapterFirstPage>1</ChapterFirstPage><ChapterLastPage>8</ChapterLastPage><ChapterCopyright><CopyrightHolderName>Springer-Verlag</CopyrightHolderName><CopyrightYear>2012</CopyrightYear></ChapterCopyright><ChapterHistory><OnlineDate><Year><?InsertOnReleaseOF OFYear?></Year><Month><?InsertOnReleaseOF OFMonth?></Month><Day><?InsertOnReleaseOF OFDay?></Day></OnlineDate></ChapterHistory></ChapterInfo><ChapterHeader><Abstract ID="Abs00011" Language="En" OutputMedium="Online"><Heading>Abstract</Heading><Para>For nearly two decades the Cascading Style Sheets (CSS) standard has been used to control the presentation of web pages. HTML defines what something <Emphasis Type="Italic">is:</Emphasis> a heading, a paragraph, an address, an image, etc. CSS describes how that element is <Emphasis Type="Italic">presented</Emphasis> to the user, including such qualities as its color, border, and dimensions. CSS includes presentational controls that few web designers even consider, such as the way text-to-speech services pronounce web page content.</Para></Abstract></ChapterHeader><Body><Para>For nearly two decades the Cascading Style Sheets (CSS) standard <IndexTerm><Primary>Cascading style sheets (CSS)</Primary><Secondary>description</Secondary></IndexTerm>has been used to control the presentation of web pages. HTML defines what something <Emphasis Type="Italic">is:</Emphasis> a heading, a paragraph, an address, an image, etc. CSS describes how that element is <Emphasis Type="Italic">presented</Emphasis> to the user, including such qualities as its color, border, and dimensions. CSS includes presentational controls that few web designers even consider, such as the way text-to-speech services pronounce web page content.</Para><Para>All of the original presentational rules of CSS were designed for <Emphasis Type="Italic">static</Emphasis> content; that is, HTML elements that did not change over time. Until recently, if you wanted an image to fade in on a web page, there were only a few web technologies that you could use, the most popular of which were JavaScript and Flash. These technologies are not complete solutions, however; they have several serious disadvantages, as I&#x2019;ll discuss at the end of the chapter.</Para><Para>Now, we have the CSS3 Transforms, Transitions, and Animation Modules. These are extensions of CSS syntax that are supported in all modern browsers, overlapping, and in some cases, replacing the traditional roles of JavaScript and Flash. While CSS3 is not without its limitations, the technology is the way forward for a lot of dynamic web content.</Para><Para>To understand how we got here, you need to know where we&#x2019;ve been. This introductory chapter will provide an overview of the CSS development process and where web development stands now, looking into the future.</Para><Section1 ID="Sec00011"><Heading><Emphasis Type="Bold">Development of CSS</Emphasis><IndexTerm><Primary>Cascading style sheets (CSS)</Primary><Secondary>development</Secondary></IndexTerm></Heading><Para>The independent evolution of web technologies has had something of a spotty history: browser vendors have sometimes propelled technology forward, while other technological implementations have complicated web development by adopting incompatible approaches.</Para><Para>The World Wide Web Consortium (W3C)<IndexTerm><Primary>World Wide Web Consortium (W3C)</Primary></IndexTerm><IndexTerm><Primary>Cascading style sheets (CSS)</Primary><Secondary>W3C</Secondary></IndexTerm> was formed in an effort to try to synthesize and standardize web technologies into a series of specifications that were broadly supported by the web development industry. The W3C might be called the United Nations of web development: as an independent standards body, it can evaluate different proposals; create forums for discussions between industry, academia, developers, and other interests; negotiate and settle disagreements; and hammer out final specifications that everyone can agree to follow.</Para><Para>The CSS standard was developed by the CSS Working Group (CSSWG)<IndexTerm><Primary>CSS Working Group (CSSWG)</Primary></IndexTerm><IndexTerm><Primary>Cascading style sheets (CSS)</Primary><Secondary>CSSWG</Secondary></IndexTerm>, a subgroup within the W3C. Over time, the CSSWG extended CSS to provide greater control over more aspects of web page content. As CSS 2.1 approached its final, finished status, further development of the specification was broken into multiple modules. Many of these modules started as &#x201C;Level-3&#x201D; proposals, leading developers to use the catch-all term <Emphasis Type="Italic">CSS3</Emphasis> for anything that followed CSS2.1. Technically, the web technologies that I focus on in this book&#x2014;Animations, Transforms, and Transitions&#x2014;are completely new Level-1 specifications, as they have no precedent in CSS1 or CSS2. Outside of very formal discussions, the web development industry refers to them collectively as <Emphasis Type="Italic">CSS3</Emphasis>, and I will continue to do so in this book.</Para><Para>At the same time, browser developers continued to innovate. Many of the CSS properties I&#x2019;ll discuss in this book were first proposed by Apple, Google, and Mozilla, not the W3C or the CSS Working Group. This led to a problem: developers wanted their browsers to support these cool technologies <Emphasis Type="Italic">today,</Emphasis> without having to wait for the long process of W3C recommendation, discussion, and final approval. Everyone knew the bitter lessons of the browser wars of the 90s and the associated clash of conflicting technologies. How could browsers support the very latest technologies proposed by their companies while making it clear that these new properties were experimental, and without conflicting with official declarations from the W3C that might emerge later?</Para><Para>The solution proved workable, but controversial: CSS vendor prefixes.</Para></Section1><Section1 ID="Sec00012"><Heading><Emphasis Type="Bold">CSS Vendor Prefixes</Emphasis><IndexTerm><Primary>Cascading style sheets (CSS)</Primary><Secondary>vendor prefixes</Secondary></IndexTerm></Heading><Para>To allow CSS3 innovation by browser developers, the web development community agreed that each browser would have its own unique prefix for proposed or experimental CSS properties (see Table <InternalRef RefID="Tab00011">1-1</InternalRef>).<Table ID="Tab00011" Float="Yes"><Caption Language="En"><CaptionNumber>Table 1-1.</CaptionNumber><CaptionContent><SimplePara><Emphasis Type="Italic">Unique Browser Prefixes</Emphasis><IndexTerm><Primary>Cascading style sheets (CSS)</Primary><Secondary>vendor prefixes</Secondary><Tertiary>unique browser prefixes</Tertiary></IndexTerm></SimplePara></CaptionContent></Caption><tgroup cols="2"><colspec colnum="1" colname="c1"/><colspec colnum="2" colname="c2"/><thead><row><entry colname="c1"><SimplePara><Emphasis Type="Bold">Prefix</Emphasis></SimplePara></entry><entry colname="c2"><SimplePara><Emphasis Type="Bold">Browser</Emphasis></SimplePara></entry></row></thead><tbody><row><entry colname="c1"><SimplePara><Emphasis FontCategory="NonProportional">-moz--o-</Emphasis></SimplePara></entry><entry colname="c2"><SimplePara>FirefoxOpera</SimplePara></entry></row><row><entry colname="c1"><SimplePara><Emphasis FontCategory="NonProportional">-webkit--ms-</Emphasis></SimplePara></entry><entry colname="c2"><SimplePara>Safari/Chrome/KonquerorInternet Explorer 9+</SimplePara></entry></row></tbody></tgroup></Table></Para><FormalPara Type="Important" RenderingStyle="Style1"><Heading><Emphasis Type="Bold">Note</Emphasis></Heading><Para>The vendor prefixes shown here are not the only ones in existence, just the ones you will need for most &#x00AD;purposes. A complete list of vendor prefixes can be found at <ExternalRef><RefSource>http://alrra.github.com/little-helpers/vendor-prefixes/</RefSource><RefTarget TargetType="URL" Address="http://alrra.github.com/little-helpers/vendor-prefixes/"/></ExternalRef>).</Para></FormalPara><Para>Every browser intended to support an experimental CSS property can do so by placing its own vendor prefix in front of it. Note that these properties are <Emphasis Type="Italic">nonstandard</Emphasis> until they achieve final approval by the W3C. Until that time, they are open to modification and interpretation both by vendors and the W3C itself. Both the property name and the way its value is specified may change rapidly, even in the same browser, as different approaches are considered and standards worked out. For example, up until the release of Safari 5.1/iOS 5.0, the Webkit development team proposed the following as the way to do linear gradients in CSS:<IndexTerm><Primary>Cascading style sheets (CSS)</Primary><Secondary>vendor prefixes</Secondary><Tertiary>linear gradients</Tertiary></IndexTerm></Para><Para Type="Programcode">body { background-image: -webkit-gradient(</Para><Para Type="Programcode">linear,</Para><Para Type="Programcode">left bottom,</Para><Para Type="Programcode">left top,</Para><Para Type="Programcode">color-stop(0.11, rgb(167,9,246)),</Para><Para Type="Programcode">color-stop(0.56, rgb(194,242,242)) );</Para><Para>Other browsers implemented gradients in different ways. For example, here&#x2019;s how it was done in Firefox:</Para><Para Type="Programcode">body {</Para><Para Type="Programcode">background-image: -moz-linear-gradient(bottom, rgb(167,9,246) 11%, rgb(194,242,242) 56%);</Para><Para Type="Programcode">}</Para><Para>These two approaches produced the same result in each browser; under contention was which was the better way to code. In the case of gradients, the W3C took a third way, more closely related to the Firefox method:</Para><Para Type="Programcode">body {</Para><Para Type="Programcode">background-image: linear-gradient(to bottom, rgb(167,9,246) 11%, rgb(194,242,242) 56%);</Para><Para Type="Programcode">}</Para><Para>However<Emphasis Type="Italic">,</Emphasis> because browsers cannot be forced to upgrade retroactively, it is still necessary to include the earlier vendor-prefixed methods to enable support in older versions. In the case of gradients, this includes both methods for Webkit-based browsers, which switched to supporting the now-standard method but kept the vendor prefix for a time.</Para><Para>Convention dictates that the W3C method (the final, expected standard) goes last in the declaration, and that vendor-prefixed versions precede it. The entire declaration for all browsers would be as follows:</Para><Para Type="Programcode">body {</Para><Para Type="Programcode">background-image: -o-linear-gradient(bottom, rgb(167,9,246) 11%, rgb(194,242,242) 56%);</Para><Para Type="Programcode">background-image: -moz-linear-gradient(bottom, rgb(167,9,246) 11%, rgb(194,242,242) 56%);</Para><Para Type="Programcode">background-image: -webkit-linear-gradient(bottom, rgb(167,9,246) 11%, rgb(194,242,242) 56%);</Para><Para Type="Programcode">background-image: -ms-linear-gradient(bottom, rgb(167,9,246) 11%, rgb(194,242,242) 56 %);</Para><Para Type="Programcode">background-image: -webkit-gradient(linear, left bottom, left top,</Para><Para Type="Programcode">color-stop(0.11, rgb(167,9,246)),</Para><Para Type="Programcode">color-stop(0.56, rgb(194,242,242)) );</Para><Para Type="Programcode">background-image: linear-gradient(to top, rgb(167,9,246) 11%, rgb(194,242,242) 56%);</Para><Para Type="Programcode">}</Para><Para>As browsers only pay attention to the CSS they understand, and ignore any CSS they don&#x2019;t, Safari and Chrome will read the -webkit line of the declaration <Emphasis Type="Italic">appropriate to that browser version</Emphasis> and implement it. Later browser versions that understand the final version of the spec will read the last line instead.</Para><Para>It is entirely possible for browsers to support both prefixed and unprefixed CSS properties at the same time. Rules for appearance in a declaration are read from left to right and top to bottom. In the case of a conflict, rules specified <Emphasis Type="Italic">later</Emphasis> take precedence over those written <Emphasis Type="Italic">earlier.</Emphasis> Placing the W3C standard last in the declaration ensures that it will always take precedence if the browser supports it.</Para><Para>While this code may appear somewhat daunting, it is immediately apparent that there is a great deal of repetition within it. With the exception of the deprecated Webkit method, most of the CSS declaration could be easily created by copying and pasting the first line and prepending vendor prefixes to the copies. There are also tools and techniques for automatic generation of vendor-prefixed code, which I will discuss in Chapter 10.</Para><Para>In order to gain support for experimental CSS properties in a particular browser, you <Emphasis Type="Italic">must</Emphasis> include the appropriate vendor prefix and value in your stylesheet. There are just two exceptions:<IndexTerm><Primary>Cascading style sheets (CSS)</Primary><Secondary>vendor prefixes</Secondary><Tertiary>exceptions</Tertiary></IndexTerm><UnorderedList Mark="Bullet"><ItemContent><Para>The browser allows prefix aliases (discussed in the next section).</Para></ItemContent><ItemContent><Para>The browser follows the final W3C standard and does not require a prefix.</Para></ItemContent></UnorderedList></Para><Para>Thankfully, properties and values for CSS Transforms, Transitions, and Animations have been broadly agreed to since the inception of the modules; as of this writing, every current browser, implements the code the same way, albeit with vendor prefixing.</Para><FormalPara Type="Important" RenderingStyle="Style1"><Heading><Emphasis Type="Bold">Note</Emphasis></Heading><Para>On June 6, 2012 the W3C finalized the specification for transitions, animations, and transforms and agreed to let all browser vendors support them without vendor prefixes. Internet Explorer 10 is the first browser to do so, with other browsers expected to follow suit shortly. Older browser versions will still require vendor prefixes.</Para></FormalPara><Section2 ID="Sec00013"><Heading><Emphasis Type="Bold">Vendor Prefixing Issues</Emphasis><IndexTerm><Primary>Cascading style sheets (CSS)</Primary><Secondary>vendor prefixes</Secondary><Tertiary>issues</Tertiary></IndexTerm></Heading><Para>While the vendor prefixing system works, it does have several issues. Exceptions and edge cases can be difficult to track and remember. For example, the best current solution to implement hyphenation for paragraphs in all browsers is as follows:</Para><Para Type="Programcode">p { &#x2212;ms-word-break: break-all; word-break: break-all; word-break: break-word;</Para><Para Type="Programcode">-moz-hyphens: auto; -webkit-hyphens: auto; hyphens: auto; hyphenate: auto;  }</Para><Para>As you can see, some of the preceding CSS declaration uses vendor prefixes, but the property names and values do not match the W3C proposal at the end, and different browsers use other properties.</Para><Para>Additionally, some browser vendors have tended to hold on to their proprietary prefixes and have not deprecated them after standards were agreed to, requiring developers to maintain legacy prefixed CSS code.</Para><Para>Finally, lazy developers have tended to implement just one or two vendor prefixes, ignoring other browsers that offer equal support under their own version of the spec. For example, many developers will include -moz and -webbkit prefixed properties in their stylesheets, but forget to add -ms or -o. For this reason, some browsers&#x2014;most notably, recent versions of Opera&#x2014;have the capacity to recognize other vendor prefixes. In the case of Opera, this means some -webkit prefixed properties.</Para><FormalPara Type="Important" RenderingStyle="Style1"><Heading><Emphasis Type="Bold">Note</Emphasis></Heading><Para>Because a complete CSS declaration that includes every vendor prefix can be very long, code examples in this book will often use just the final expected specification. <Emphasis Type="Italic">In most cases you should not limit prefixed properties to just the examples you see here if you wish to gain complete backward compatibility in all browsers.</Emphasis></Para></FormalPara></Section2></Section1><Section1 ID="Sec00014"><Heading><Emphasis Type="Bold">CSS3 Browser Support</Emphasis><IndexTerm><Primary>Cascading style sheets (CSS)</Primary><Secondary>CSS3</Secondary><Tertiary>browser support</Tertiary></IndexTerm><IndexTerm><Primary>Cascading style sheets (CSS)</Primary><Secondary>CSS3</Secondary></IndexTerm><IndexTerm><Primary>CSS3</Primary></IndexTerm><IndexTerm><Primary>CSS3</Primary><Secondary>browser support</Secondary></IndexTerm></Heading><Para>CSS3 Transforms are fully supported by the following browser versions, with vendor prefixing:<UnorderedList Mark="Bullet"><ItemContent><Para>Internet Explorer 9 (IE10 does not require prefixes)</Para></ItemContent><ItemContent><Para>Firefox 3.5 and above</Para></ItemContent><ItemContent><Para>Chrome 4 and above</Para></ItemContent><ItemContent><Para>Safari 3.1 and above</Para></ItemContent><ItemContent><Para>Opera 10.5 and above</Para></ItemContent><ItemContent><Para>iOS Safari 3.2 and above</Para></ItemContent><ItemContent><Para>Opera Mobile 11</Para></ItemContent><ItemContent><Para>Android 2.1 and above</Para></ItemContent></UnorderedList></Para><Para>CSS3 Transitions are fully supported by the following browser versions, with vendor prefixing:<UnorderedList Mark="Bullet"><ItemContent><Para>Firefox 4 and above</Para></ItemContent><ItemContent><Para>Chrome 4 and above</Para></ItemContent><ItemContent><Para>Safari 3.1 and above</Para></ItemContent><ItemContent><Para>Opera 10.5 and above</Para></ItemContent><ItemContent><Para>iOS Safari 3.2 and above</Para></ItemContent><ItemContent><Para>Opera Mobile 10</Para></ItemContent><ItemContent><Para>Android 2.1 and above</Para></ItemContent></UnorderedList></Para><Para>Internet Explorer 10 supports transitions without prefixing; you can expect very recent versions of other browsers to do the same.</Para><Para>The CSS3 Animation working draft is fully supported by the following browser versions, with vendor prefixing:<UnorderedList Mark="Bullet"><ItemContent><Para>Firefox 5 and above</Para></ItemContent><ItemContent><Para>Chrome 4 and above</Para></ItemContent><ItemContent><Para>Safari 4 and above</Para></ItemContent><ItemContent><Para>Opera 12 and above</Para></ItemContent><ItemContent><Para>iOS Safari 3.2 and above</Para></ItemContent><ItemContent><Para>Android 4.0 and above (partial support from 2.1)</Para></ItemContent></UnorderedList></Para><Para>Again, Internet Explorer 10 supports CSS Animations without prefixing.</Para><FormalPara Type="Important" RenderingStyle="Style1"><Heading><Emphasis Type="Bold">Tip</Emphasis></Heading><Para><ExternalRef><RefSource>www.caniuse.com</RefSource><RefTarget TargetType="URL" Address="http://www.caniuse.com"/></ExternalRef> is an excellent resource to keep track of browser support for CSS3.</Para></FormalPara></Section1><Section1 ID="Sec00015"><Heading><Emphasis Type="Bold">Limitations of CSS3 Animation</Emphasis><IndexTerm><Primary>Cascading style sheets (CSS)</Primary><Secondary>CSS3</Secondary><Tertiary>animation limitations</Tertiary></IndexTerm><IndexTerm><Primary>CSS3</Primary><Secondary>animation limitations</Secondary></IndexTerm></Heading><Para>While CSS3 Transforms, Transitions, and Animations are very powerful, there are a few properties that they cannot affect, at least not currently:<UnorderedList Mark="Bullet"><ItemContent><Para>CSS3 cannot control scroll bars or &#x201C;scroll&#x201D; the entire body of the document</Para></ItemContent><ItemContent><Para>Gradients cannot be animated (although this is possible to achieve with SVG or JavaScript).</Para></ItemContent></UnorderedList></Para></Section1><Section1 ID="Sec00016"><Heading><Emphasis Type="Bold">Design Principles: Progressive Enhancement and Graceful Degradation</Emphasis><IndexTerm><Primary>Cascading style sheets (CSS)</Primary><Secondary>design principles</Secondary></IndexTerm></Heading><Para>One of the design methodologies common to both CSS and JavaScript is <Emphasis Type="Italic">graceful degradation</Emphasis>, also known as <Emphasis Type="Italic">progressive enhancement</Emphasis>. Put simply, the idea is to use CSS to <Emphasis Type="Italic">enhance</Emphasis> a website, not for the site to be utterly dependent on it.</Para><Para>This becomes especially important when you start to animate content. Because CSS3 is only supported in certain browsers, when applying advanced technologies, you should always ask, &#x201C;If the browser doesn&#x2019;t show what I am trying to achieve, can the site still be used?&#x201D;</Para><Para>This is problematic for some people, especially clients, who insist that a site should look and perform &#x201C;exactly the same in every browser.&#x201D; In the age of the iPhone and responsive web design, however, this is no longer a realistic expectation. Instead, you need to treat the addition of advanced CSS to a site as a series of what-if scenarios:<UnorderedList Mark="Bullet"><ItemContent><Para>If you use CSS3 to create an image slideshow on a web page (as shown in Chapter 6), and the browser doesn&#x2019;t support it, what happens? If the user sees a static placeholder image in place of the slideshow, is that alright? Or do you need to use JavaScript as a fallback?</Para></ItemContent><ItemContent><Para>If you use CSS3 to enhance a site&#x2019;s navigation bar with animation, is it okay that some users won&#x2019;t see the animation? Can they still use the navigation bar without it?</Para></ItemContent></UnorderedList></Para><Para>The various examples and tutorials throughout this book will demonstrate different solutions to achieve backward compatibility, as there is no one practice or technique that is applicable in all cases. At the same time, I&#x2019;ll also be emphasizing accessibility; that is, enabling users with different needs and abilities (such as the blind, or site visitors who use a keyboard without a mouse) to access your work.</Para></Section1><Section1 ID="Sec00017"><Heading><Emphasis Type="Bold">Why CSS3 Rather Than JavaScript or Flash?</Emphasis></Heading><Para>You can find a comprehensive list of advantages and disadvantages of using CSS3 rather than JavaScript or Flash in Table <InternalRef RefID="Tab00012">1-2</InternalRef>.<Table ID="Tab00012" Float="Yes"><Caption Language="En"><CaptionNumber>Table 1-2.</CaptionNumber><CaptionContent><SimplePara><Emphasis Type="Italic">CSS3 vs. JavaScript and Flash</Emphasis><IndexTerm><Primary>Cascading style sheets (CSS)</Primary><Secondary>CSS3</Secondary><Tertiary>vs. JavaScript and Flash</Tertiary></IndexTerm><IndexTerm><Primary>CSS3</Primary><Secondary>vs. JavaScript and Flash</Secondary></IndexTerm></SimplePara></CaptionContent></Caption><tgroup cols="2"><colspec colnum="1" colname="c1"/><colspec colnum="2" colname="c2"/><thead><row><entry namest="c1" nameend="c2" align="center"><SimplePara><Emphasis Type="Bold">CSS3</Emphasis></SimplePara></entry></row></thead><tbody><row><entry colname="c1"><SimplePara><Emphasis Type="Bold">Advantages</Emphasis></SimplePara></entry><entry colname="c2"><SimplePara><Emphasis Type="Bold">Disadvantages</Emphasis></SimplePara></entry></row><row><entry colname="c1"><SimplePara>Builds on familiar ground; uses an established CSS syntax. Simple to understand.</SimplePara></entry><entry colname="c2"><SimplePara>While historically well-supported in Firefox, Safari, and Chrome, compatibility in IE and Opera is limited to recent builds.</SimplePara></entry></row><row><entry colname="c1"><SimplePara>Fastest and smoothest form of animation in a browser, with higher frame rates than JavaScript.</SimplePara></entry><entry morerows="1" colname="c2"><SimplePara>Relatively few graphical tools exist to create animation code, forcing a degree of hand coding. (Although this is changing; see Chapter 10.)</SimplePara></entry></row><row><entry colname="c1"><SimplePara>Manipulates existing HTML content, enhancing SEO.</SimplePara></entry></row><row><entry namest="c1" nameend="c2" align="center"><SimplePara><Emphasis Type="Bold">Flash</Emphasis></SimplePara></entry></row><row><entry colname="c1"><SimplePara><Emphasis Type="Bold">Advantages</Emphasis></SimplePara></entry><entry colname="c2"><SimplePara><Emphasis Type="Bold">Disadvantages</Emphasis></SimplePara></entry></row><row><entry colname="c1"><SimplePara>Well-established GUI to create animations.</SimplePara></entry><entry colname="c2"><SimplePara>Cannot be played on many mobile devices (most significantly Apple iPhone and iPad together with Android and Windows 8 devices).</SimplePara></entry></row><row><entry colname="c1"><SimplePara>Loops, variables, and functions make ActionScript (Flash&#x2019;s scripting language) more powerful than CSS.</SimplePara></entry><entry colname="c2"><SimplePara>Depends on the presence of a plug-in that must be regularly updated by the user.</SimplePara></entry></row><row><entry colname="c1"/><entry colname="c2"><SimplePara>Tends to &#x201C;lock down&#x201D; content, making it inaccessible to CSS, search engine robots, accessibility devices, such as screen readers, and fair use cases.</SimplePara></entry></row><row><entry namest="c1" nameend="c2" align="center"><SimplePara><Emphasis Type="Bold">JavaScript</Emphasis></SimplePara></entry></row><row><entry colname="c1"><SimplePara><Emphasis Type="Bold">Advantages</Emphasis></SimplePara></entry><entry colname="c2"><SimplePara><Emphasis Type="Bold">Disadvantages</Emphasis></SimplePara></entry></row><row><entry colname="c1"><SimplePara>Well-supported, with a host of frameworks.</SimplePara></entry><entry colname="c2"><SimplePara>Use of a framework requires an extra HTTP request, slowing page load time.</SimplePara></entry></row><row><entry colname="c1"><SimplePara>Works by manipulating HTML elements via the DOM and CSS, familiar to any web developer.</SimplePara></entry><entry colname="c2"><SimplePara>Syntax can be somewhat obtuse, even with a framework.</SimplePara></entry></row><row><entry colname="c1"><SimplePara>Loops, variables, and functions make the language more powerful than CSS.</SimplePara></entry><entry colname="c2"><SimplePara>Content generated by JavaScript is not indexed by search engines.</SimplePara></entry></row></tbody></tgroup></Table></Para></Section1><Section1 ID="Sec00018"><Heading><Emphasis Type="Bold">Other Technologies</Emphasis></Heading><Para>There exists a degree of confusion about the roles of other new web technologies, particularly in clients, so it is worthwhile discussing what CSS3 Animation is not<Emphasis Type="Italic">.</Emphasis></Para><Para>CSS3 is not HTML5<IndexTerm><Primary>Cascading style sheets (CSS)</Primary><Secondary>CSS3</Secondary><Tertiary>HTML5</Tertiary></IndexTerm><IndexTerm><Primary>CSS3</Primary><Secondary>HTML5</Secondary></IndexTerm>. While the two technologies tend to be spoken of in the same breath, CSS3 is not related to HTML5. Markup is not presentation: CSS3 can be equally applied to XHTML or HTML3.1. In this book, you&#x2019;ll be using HTML5 as your markup, but you don&#x2019;t have to.</Para><Para>CSS3 is not Canvas. &#x003C;canvas&#x003E; &#x2009;is an HTML5 element that creates a JavaScript-accessible &#x201C;drawing area&#x201D; on a web page. The location of the &#x2009;&#x003C;canvas&#x003E; &#x2009;surface is defined by CSS, but any animation that occurs within it is controlled by JavaScript.</Para><Para>CSS 3D Transforms<IndexTerm><Primary>Cascading style sheets (CSS)</Primary><Secondary>3D Transforms</Secondary></IndexTerm> are part of the CSS Transforms Module, not Animation. CSS Transforms are used to manipulate the visual perspective of HTML elements. These transformations can be animated, but CSS 3D Transforms (discussed in Chapter 9) are not animations in and of themselves.</Para><Para>WebGL is not CSS Animation. WebGL is a JavaScript 3D API that manipulates drawings in the &#x2009;&#x003C;canvas&#x003E; &#x2009;element.</Para></Section1><Section1 ID="Sec00019"><Heading><Emphasis Type="Bold">Summary</Emphasis></Heading><Para>In this chapter you&#x2019;ve learned how CSS is developed and standardized, and the role of the W3C in that process. Beginning web developers sometimes see the W3C as a kind of benign overlord, dictating standards from on high; the reality is that the organization and its various working groups is really an integrator and standardizer of innovations created by browser vendors.</Para><Para>While they remain in an experimental state, new CSS properties are up for grabs when it comes to how they are implemented. To this end, vendor prefixes, specific to each browser, are used to distinguish a browser maker&#x2019;s interpretation of a new CSS property. It is only when the property is standardized by the W3C and support is built into the software that a browser will interpret a nonprefixed version.</Para><Para>While CSS3 Animation, Transitions, and Transforms have a number of significant advantages over the traditional web animation solutions of Flash and JavaScript, their relative newness limits them to fairly recent browser builds, most especially in the case of Internet Explorer and Opera. It is important to consider fallback techniques during development so that users with older browsers or who are reliant on assistive devices such as screen readers do not miss out on your site content. (It is equally important to communicate these issues to clients and other web developers, who may frequently choose from a &#x201C;word salad&#x201D; of peripheral or unrelated technologies, such as HTML5, when trying to talk about web animation.)</Para><Para>In the next chapter, I&#x2019;ll introduce the syntax for CSS Transforms and how to create CSS Transitions, the simplest form of CSS3 animation. While there will be a little bit of math, we&#x2019;ll leaven this by comparing CSS3 animations with real-world examples of motion, including classical animation techniques employed by Disney.</Para></Section1></Body><BodyRef FileRef="978-1-4302-4722-7_1_Chapter_OnlinePDF.pdf" TargetType="OnlinePDF" PDFType="Typeset" OutputMedium="Online"/></Chapter>