<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE Chapter PUBLIC "-//Springer-Verlag//DTD A++ V2.4//EN" "http://devel.springer.de/A++/V2.4/DTD/A++V2.4.dtd"> <Chapter  Language="En" OutputMedium="All" ID="b9781430247227_10"><ChapterInfo Language="En" ChapterType="OriginalPaper" NumberingStyle="ChapterOnly" TocLevels="0" ContainsESM="No" OutputMedium="All"><ChapterID>10</ChapterID><ChapterNumber>Chapter 10</ChapterNumber><ChapterDOI>10.1007/9781430247227_10</ChapterDOI><ChapterSequenceNumber>0</ChapterSequenceNumber><ChapterTitle Language="En">Tools, Technologies, and the Future of CSS Animation <IndexTerm><Primary>CSS3 animations and transitions</Primary></IndexTerm></ChapterTitle><ChapterFirstPage>155</ChapterFirstPage><ChapterLastPage>166</ChapterLastPage><ChapterCopyright><CopyrightHolderName>Springer-Verlag</CopyrightHolderName><CopyrightYear><?InsertOnReleaseOF CopyrightYear?></CopyrightYear></ChapterCopyright><ChapterHistory><OnlineDate><Year><?InsertOnReleaseOF OFYear?></Year><Month><?InsertOnReleaseOF OFMonth?></Month><Day><?InsertOnReleaseOF OFDay?></Day></OnlineDate></ChapterHistory></ChapterInfo><ChapterHeader><Abstract ID="Abs1" Language="En" OutputMedium="Online"><Heading>Abstract</Heading><Para>As a set of W3C modules that are only beginning to move from Working Draft to Candidate Recommendation status, the CSS Transforms, Transitions, and Animation specifications do not yet have the robust industry toolset that older, finalized specs boast. Software developers can&#x2019;t be blamed for the relative paucity of tools: the specification has been a moving target, making application development challenging. At the same time, the W3C is moving forward on new technologies, making tool development even harder, while CSS itself becomes much more powerful.</Para></Abstract></ChapterHeader><Body><Para>As a set of W3C modules that are only beginning to move from Working Draft to Candidate Recommendation status, the CSS Transforms, Transitions, and Animation specifications do not yet have the robust industry toolset that older, finalized specs boast. Software developers can&#x2019;t be blamed for the relative paucity of tools: the specification has been a moving target, making application development challenging. At the same time, the <IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>W3C</Secondary></IndexTerm>W3C is moving forward on new technologies, making tool development even harder, while CSS itself becomes much more powerful.</Para><Para>Despite the rapid pace of change, there are a number of solutions available to speed and streamline workflow and development in CSS3 animations, both for backward compatibility in older browsers and forward-looking applications for development now and in the future. Before we get to that, however, you should take a moment to appreciate how to effectively use the skills you&#x2019;ve learned so far.</Para><Section1 ID="Sec1"><Heading>Writing Effective CSS3 Animations and Transitions: Avoiding Reflows</Heading><Para>There are two actions in CSS that are computationally expensive for a browser to handle: repaints and reflows.</Para><Para>A page <Emphasis Type="Italic">reflow</Emphasis><IndexTerm><Primary>page <Emphasis Type="Italic">reflow</Emphasis></Primary></IndexTerm> is initiated when the layout of page content is altered: think of the appearance of a fluid site changing as the browser window narrows. A <IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>repaint</Secondary></IndexTerm><Emphasis Type="Italic">repaint</Emphasis> occurs when an element changes its visibility, but in ways that do not affect the layout of its neighbors: when an element&#x2019;s visibility, opacity, or background color changes, for example.</Para><Para>Of the two, reflows are usually the more detrimental to performance, as a reflow will &#x201C;ripple<IndexTerm><Primary>ripple</Primary></IndexTerm>&#x201D; through the DOM tree from the affected element downwards through all child nodes and those after, forcing multiple elements to change their position. In many cases, reflows can essentially redraw the entire page. Reflow actions may not be significant to performance on modern desktop machines, but can be a critical hit on lesser-powered devices, such as smartphones. Most relevant to our interests, use of any pseudoelement, such as <Emphasis FontCategory="NonProportional">:hover</Emphasis>, or a script manipulating the DOM, will initiate a reflow.</Para><FormalPara Type="Important" RenderingStyle="Style1"><Heading>Note</Heading><Para>If you&#x2019;re more of a visually-oriented person, you can see a very slowed-down reflow process in Firefox as it lays out the <Emphasis FontCategory="NonProportional">google.co.jp</Emphasis> homepage for the first time on YouTube at <ExternalRef><RefSource>www.youtube.com/watch?v=nJtBUHyNBxs</RefSource><RefTarget TargetType="URL" Address="http://www.youtube.com/watch?v=nJtBUHyNBxs"/></ExternalRef>.</Para></FormalPara><Para>While browser reflows are unavoidable, their impact can be minimized and localized by following a few rules: <IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>reflow, rules for</Secondary></IndexTerm><UnorderedList Mark="Bullet"><ItemContent><Para><Emphasis Type="Italic">Try to affect the element you wish to style directly, rather than its parent</Emphasis>. That is, try to limit the scope of any reflow: rather than altering the class of a container element to affect its children, try to affect the children themselves directly. This does not avoid all reflows&#x2014;altering the height of an element may affect the dimensions of its parent, for example, causing a reflow to ripple up&#x2014;but it is a good general rule.</Para></ItemContent><ItemContent><Para><Emphasis Type="Italic">Avoid setting inline styles</Emphasis>. Most especially, avoid the creation of multiple inline styles. Instead, externalize the relevant CSS into a class and then change the class. A work process that emphasizes the opposite&#x2014;trying to manipulate an inline style, or merging styles between embedded, linked, and inline styles, for example&#x2014;will likely cause multiple reflows as each is adjusted.</Para></ItemContent><ItemContent><Para><Emphasis Type="Italic">Apply animations to elements using</Emphasis> <Emphasis FontCategory="NonProportional" Type="Italic">transform</Emphasis>, <Emphasis Type="Italic">or to elements that are positioned absolutely or fixed</Emphasis>. Elements with these characteristics do not affect the position of others, meaning that only the affected element will be repainted, without the cost of a reflow.</Para></ItemContent><ItemContent><Para><Emphasis Type="Italic">Create animations that are &#x201C;internal&#x201D; to an element with a fixed height and width and/or that has</Emphasis> <Emphasis FontCategory="NonProportional" Type="Italic">overflow:hidden</Emphasis> <Emphasis Type="Italic">applied</Emphasis>. Animations inside such elements will not affect others, avoiding opportunities for reflows.</Para></ItemContent><ItemContent><Para><Emphasis Type="Italic">Specify set image dimensions</Emphasis>. If the browser knows the width and height of image elements, it will not have to push content around as the image is placed on the page. Obviously this is complicated by current trends in responsive design.</Para></ItemContent><ItemContent><Para><Emphasis Type="Italic">Avoid long descendant selectors</Emphasis>. Long descendant selectors with many tags tend to be computationally expensive.</Para></ItemContent><ItemContent><Para><Emphasis Type="Italic">Avoid use of the universal selector</Emphasis>. The wildcard (*) selector is the most computationally burdensome selector of all.</Para></ItemContent><ItemContent><Para><Emphasis Type="Italic">Try to specify the property you wish to transition, rather than using &#x201C;all&#x201D;</Emphasis>. While not directly related to reflows, using the &#x201C;<Emphasis FontCategory="NonProportional">all</Emphasis>&#x201D; option in a transition is wasteful, as the browser is then forced to track <Emphasis Type="Italic">every</Emphasis> possible change to the element. Specifying a single property you wish to track and change, such as <Emphasis FontCategory="NonProportional">opacity</Emphasis>, is far more efficient.</Para></ItemContent><ItemContent><Para><Emphasis Type="Italic">Use a style profiler</Emphasis>. (See Figure <InternalRef RefID="Fig1">10-1</InternalRef>.)</Para></ItemContent></UnorderedList><Figure ID="Fig1" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 10-1</CaptionNumber>.&#x2002;<CaptionContent><SimplePara>A profile tool, such as the Timeline Developer Tool in Chrome or the Style Profiler in Opera Dragonfly, can help to highlight areas in which your CSS is particularly inefficient or slow</SimplePara></CaptionContent></Caption><MediaObject ID="MO1"><ImageObject FileRef="9781430247227_Fig10-01.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para></Section1><Section1 ID="Sec2"><Heading>Automatic Prefixing Tools: Client-Side<IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>automatic prefixing tools</Secondary><Tertiary>client-side</Tertiary></IndexTerm></Heading><Para>In order to gain support in older browser versions, CSS3 Transforms, Transitions, and Animations must be written as separate declarations with the correct browser vendor prefixes, as discussed in Chapter 1. While maintaining five different lines of code for a single transition is certainly achievable, maintaining anything more complex can be a nightmare. While tools such as Prefixr (<ExternalRef><RefSource>http://prefixr.com</RefSource><RefTarget TargetType="URL" Address="http://prefixr.com"/></ExternalRef>) can add prefixes to existing code, they&#x2019;re not realistic options for code that is open to change: any alterations to the original CSS means you will need to go through the same process again to add prefixes. There are several possible solutions to this issue, one server-side, the other client-side, each with its own advantages and disadvantages.</Para><Section2 ID="Sec3"><Heading>-prefix-free <IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>automatic prefixing tools</Secondary><Tertiary>prefix-free</Tertiary></IndexTerm></Heading><Para>Greek developer Lea Verou (<ExternalRef><RefSource>http://lea.verou.me</RefSource><RefTarget TargetType="URL" Address="http://lea.verou.me"/></ExternalRef>) has written a popular, lightweight, and effective script that, dropped into a page, will customize any non-prefixed CSS code as needed for the browser that is viewing the page (<ExternalRef><RefSource>http://leaverou.github.com/prefixfree/</RefSource><RefTarget TargetType="URL" Address="http://leaverou.github.com/prefixfree/"/></ExternalRef>).</Para><Para>This is my personal preferred solution for lightweight work (such as making a CSS3 animation in the header of a blog post); it allows me to write single lines of code that follow the expected final spec, minimizing file size, and it lets the script handle backward compatibility. There are a few issues to be aware of, however:<UnorderedList Mark="Bullet"><ItemContent><Para>There is a strong argument to be made that this kind of CSS declaration transformation is not the role of a client-side script, but a server-side one, as discussed below.</Para></ItemContent><ItemContent><Para>Users who browse a site that uses the <Emphasis FontCategory="NonProportional">-prefix-free</Emphasis> script but who have JavaScript turned off&#x2014;either directly or through a browser extension such as NoScript (<ExternalRef><RefSource>http://noscript.net)</RefSource><RefTarget TargetType="URL" Address="http://noscript.net)&#x2014;and"/></ExternalRef>&#x2014;and are using a browser that is still dependent on vendor prefixes will not see any transforms, transitions, or animations. However, this particular audience is small and&#x2014;especially in regard to the number of browsers moving to support non-prefixed CSS3&#x2014;rapidly diminishing in size. In addition, if you&#x2019;ve followed the principles of progressive enhancement and graceful degradation in Chapter 2, the lack of CSS3 should not affect a user&#x2019;s ability to enjoy or use your site.</Para></ItemContent><ItemContent><Para>The delivery of standard prefixed CSS3 from the server may be slightly faster in some cases, due to the fact that <Emphasis FontCategory="NonProportional">-prefix-free</Emphasis> must process the CSS client-side before it can be used. In practice, this is usually balanced out by the server-side processing required in other solutions, or the larger file size associated with fully-prefixed CSS code.</Para></ItemContent><ItemContent><Para>Unprefixed properties that appear in inline styles won&#x2019;t be transformed by -prefix-free for Firefox 3.6 or lower (a very unusual case, at least for most sites and their visitors).</Para></ItemContent></UnorderedList></Para></Section2><Section2 ID="Sec4"><Heading>SASS, LESS, Compass and Codekit<IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>automatic prefixing tools</Secondary><Tertiary>meta frameworks</Tertiary></IndexTerm></Heading><Para>SASS (<ExternalRef><RefSource>http://sass-lang.com</RefSource><RefTarget TargetType="URL" Address="http://sass-lang.com"/></ExternalRef>) and LESS (<ExternalRef><RefSource>http://lesscss.org</RefSource><RefTarget TargetType="URL" Address="http://lesscss.org"/></ExternalRef>) are perhaps best described as &#x201C;meta frameworks&#x201D; for CSS, allowing features such as variables, functions, loops, automatic validation, optimization, and minification of code, nested rules, and (the most relevant to our interests here) automatic prefixing of CSS3 through &#x201C;mixins.&#x201D; Both frameworks promote themselves as <Emphasis Type="Italic">CSS Extensions</Emphasis>, although this should not be considered an endorsement by the W3C. (That being said, many of the innovations CSS frameworks have promoted, such as variables, are being taken on in new CSS modules.)</Para><Para>LESS works through JavaScript, &#x201C;translating&#x201D; a LESS-infused stylesheet (<Emphasis FontCategory="NonProportional">styles.less</Emphasis>) into browser-ready CSS at runtime: as a result, it shares many of the advantages (and disadvantages) of -prefix-free. SASS takes the approach of precompiling stylesheets written in SASS (<Emphasis FontCategory="NonProportional">styles.scss</Emphasis>) into a complete <Emphasis FontCategory="NonProportional">.css</Emphasis> file that can be used by every browser.</Para><Para>Compass (<ExternalRef><RefSource>http://compass-style.org/</RefSource><RefTarget TargetType="URL" Address="http://compass-style.org/"/></ExternalRef>) bundles many of the best additions for SASS together. Managing different SASS tools and extensions is made somewhat difficult by the fact they they must be controlled through the command line as Ruby gems. CodeKit (<ExternalRef><RefSource>http://incident57.com/codekit</RefSource><RefTarget TargetType="URL" Address="http://incident57.com/codekit"/></ExternalRef>) is a framework manager for Mac OS X that pulls them all together (including LESS, Stylus, and Compass) in a graphical user interface and some other nice features&#x2014;such as automatically refreshing the page in an open browser when the CSS has changed.</Para><Para>Finally, including a &#x201C;mixin&#x201D; helps shortcut your code still further; a library collection of scripts such as Bourbon (<ExternalRef><RefSource>http://thoughtbot.com/bourbon/</RefSource><RefTarget TargetType="URL" Address="http://thoughtbot.com/bourbon/"/></ExternalRef>) or Compass will allow you to type a simple transition in SASS in this way. (The code in Listing 10-1 is shown in Compass syntax.)</Para><Para><Emphasis Type="BoldItalic">Listing 10-1.&#x2002;</Emphasis> <Emphasis Type="Italic">Using a SASS Mixin to Generate Vendor-Prefixed Code</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">#element {</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">@include transition-property(width);</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">@include transition-duration(2s);</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">@include transition-timing-function(ease-in); }</Emphasis></Para><Para Type="Programcode">  &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">#element:hover {</Emphasis></Para><Para Type="Programcode">  <Emphasis FontCategory="NonProportional">width: 180%</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para>The code in Listing 10-4 will be automatically expanded to cover all browser vendor prefixes when the code is compiled.</Para></Section2></Section1><Section1 ID="Sec5"><Heading>Automatic Prefixing Tools: Server-Side<IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>automatic prefixing tools</Secondary><Tertiary>server-side</Tertiary></IndexTerm></Heading><Para>CSS Prefixer (<ExternalRef><RefSource>http://cssprefixer.appspot.com</RefSource><RefTarget TargetType="URL" Address="http://cssprefixer.appspot.com"/></ExternalRef>) takes a server-side approach: operating as a Python script, it converts nonprefixed CSS into vendor declarations when a <Emphasis FontCategory="NonProportional">.css</Emphasis> file is served. While it is more dependable than a client-side solution like -prefix-free or LESS, it does not attempt any kind of client detection: the CSS produced is prefixed for every possible browser, significantly expanding the codebase and file size.</Para></Section1><Section1 ID="Sec6"><Heading>GUI-Based CSS3 Animation Tools<IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>GUI</Secondary></IndexTerm></Heading><Para>Text editors start to become challenged as CSS3 animations grow more ambitious and complex: while they are perfectly suited for small projects, visual tools have significant advantages when it comes to animating multiple elements separately. The field is growing rapidly and the following is merely a selection.</Para><Section2 ID="Sec7"><Heading>Sencha Animator<IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>GUI</Secondary><Tertiary>sencha animation</Tertiary></IndexTerm></Heading><Para>One of the first popular tools on the block, Sencha Animator (<ExternalRef><RefSource>www.sencha.com/products/animator</RefSource><RefTarget TargetType="URL" Address="http://www.sencha.com/products/animator"/></ExternalRef>) uses the familiar timeline UI together with a complete suite of transform and keyframing tools to create CSS animations (see Figure <InternalRef RefID="Fig2">10-2</InternalRef>).<Figure ID="Fig2" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 10-2</CaptionNumber>.&#x2002;<CaptionContent><SimplePara>Screenshot of Sencha Animator</SimplePara></CaptionContent></Caption><MediaObject ID="MO2"><ImageObject FileRef="9781430247227_Fig10-02.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para><Para>The application&#x2019;s output is somewhat obfuscated, however, making the result difficult to work with in any other application; its default means of presenting the work (via JavaScript, and solely using vendor-prefixed code for Firefox and Webkit) means that the result must be heavily edited for full cross-browser compatibility.</Para></Section2><Section2 ID="Sec8"><Heading>Adobe Edge Animate<IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>GUI</Secondary><Tertiary>adobe edge animation</Tertiary></IndexTerm></Heading><Para>The newest addition to the range of CSS animation tools (and barely out of beta), Adobe Edge Animate (<ExternalRef><RefSource>http://html.adobe.com/edge/animate</RefSource><RefTarget TargetType="URL" Address="http://html.adobe.com/edge/animate"/></ExternalRef>) is a very promising application that builds on the standard Adobe UI (and the default dark-gray theme of Adobe&#x2019;s Creative Suite 6, as shown in Figure <InternalRef RefID="Fig3">10-3</InternalRef>) but which adds a number of significant improvements. It also uses JavaScript as a framework to support CSS3 animations, but does so in a way that supports all modern browsers and older versions with vendor prefixes.<Figure ID="Fig3" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 10-3</CaptionNumber>.&#x2002;<CaptionContent><SimplePara>Screenshot of Adobe Edge Animate</SimplePara></CaptionContent></Caption><MediaObject ID="MO3"><ImageObject FileRef="9781430247227_Fig10-03.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para></Section2><Section2 ID="Sec9"><Heading>Animatable</Heading><Para>After making a splash by creating a very popular CSS3 animation for the opening credits of AMC television&#x2019;s <Emphasis Type="Italic">Mad Men</Emphasis> (see <ExternalRef><RefSource>http://stuffandnonsense.co.uk/content/demo/madmanimation/</RefSource><RefTarget TargetType="URL" Address="http://stuffandnonsense.co.uk/content/demo/madmanimation/"/></ExternalRef> and Figure <InternalRef RefID="Fig4">10-4</InternalRef>)<Emphasis Type="Italic">,</Emphasis> development of Animatable (<ExternalRef><RefSource>http://animatable.com</RefSource><RefTarget TargetType="URL" Address="http://animatable.com"/></ExternalRef>) appears to have stalled, or at least gone quiet; it&#x2019;s still worth keeping an eye on the product for breaking changes, however.<Figure ID="Fig4" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 10-4</CaptionNumber>.&#x2002;<CaptionContent><SimplePara>Still from the Mad Men credit sequence CSS animation created by Animatable</SimplePara></CaptionContent></Caption><MediaObject ID="MO4"><ImageObject FileRef="9781430247227_Fig10-04.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para></Section2><Section2 ID="Sec10"><Heading>Tumult Hype<IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>GUI</Secondary><Tertiary>Tumult Hype</Tertiary></IndexTerm></Heading><Para>Another web animation GUI, of all of the tools described here Tumult Hype is the most heavily invested in JavaScript: the application describes itself as an &#x201C;HTML5 animation tool&#x201D; rather than a CSS3 development program. This is a pity, since its UI is probably the most intuitive to use, as shown in Figure <InternalRef RefID="Fig5">10-5</InternalRef>.<Figure ID="Fig5" Float="Yes" Category="Standard"><Caption Language="En"><CaptionNumber>Figure 10-5</CaptionNumber>.&#x2002;<CaptionContent><SimplePara>Screenshot of Tumult Hype animation UI</SimplePara></CaptionContent></Caption><MediaObject ID="MO5"><ImageObject FileRef="9781430247227_Fig10-05.gif" Format="GIF" Color="BlackWhite" Type="Linedraw" Rendition="HTML"/></MediaObject></Figure></Para></Section2></Section1><Section1 ID="Sec11"><Heading>Future Trends: CSS Custom Filters<IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>custom filters </Secondary></IndexTerm></Heading><Para>An Adobe technology previously known as Web Shaders, the W3C has adopted this new technology as a proposal named CSS Custom Filters.</Para><Para>The standard filters explored in Chapter 9 might be best described as simple image converters: <Emphasis FontCategory="NonProportional">hue-rotate</Emphasis>, <Emphasis FontCategory="NonProportional">blur</Emphasis>, and <Emphasis FontCategory="NonProportional">sepia</Emphasis> consistently shift all the pixels of the affected image, but nothing more. Standard CSS Filters cannot affect individual pixels: you can&#x2019;t use a filter on half an image, nor can you use a filter to distort an image. Custom Filters explicitly splits this process into two separate functions: programmable <Emphasis Type="Italic">fragment shaders</Emphasis><IndexTerm><Primary><Emphasis Type="Italic">fragment shaders</Emphasis></Primary></IndexTerm> can be used to adjust the color of pixels, animate wipes, and create custom transitions; <Emphasis Type="Italic">vertex shaders</Emphasis> treat the area of every DOM element as a visual mesh<Emphasis Type="Italic">,</Emphasis> allowing the designer to ripple, bend, twist, and distort the surface of images as well as every other element.</Para><Para>A call to a custom filter, as proposed in the current specification, looks like Listing 10-2.</Para><Para><Emphasis Type="BoldItalic">Listing 10-2.</Emphasis>&#x2002;<Emphasis Type="Italic">A Transition Utilizing a CSS Custom Filter</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">#shaded-element {</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">filter: custom(url(&#x2018;wobble.vs&#x2019;)</Emphasis> &#x2009;</Para><Para Type="Programcode">      <Emphasis FontCategory="NonProportional">40 40,</Emphasis></Para><Para Type="Programcode">      <Emphasis FontCategory="NonProportional">amplitude 60,</Emphasis></Para><Para Type="Programcode">      <Emphasis FontCategory="NonProportional">amount 0.0);</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">)</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">transition: filter ease-in-out 2s;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para>The number pair <Emphasis FontCategory="NonProportional">40 40</Emphasis> works to define the density of the virtual mesh that the element is divided into: more divisions will create a smoother, more fluid, and detailed effect. <Emphasis FontCategory="NonProportional">amplitude</Emphasis> is the strength of the effect, and <Emphasis FontCategory="NonProportional">amount</Emphasis> is the degree to which the element is affected.</Para><Para>The <Emphasis FontCategory="NonProportional">wobble.vs</Emphasis> (vertex shader) file referred to in the first line is written in the OpenGL ES shading language, utilizing the same syntax used in WebGL to create browser-native 3D on web pages, as shown in Listing 10-3.</Para><Para><Emphasis Type="BoldItalic">Listing 10-3.</Emphasis>&#x2002;<Emphasis Type="Italic">An OpenGL ES Shader</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">precision mediump float;</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">attribute vec3 a_position;</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">attribute vec2 a_texCoord;</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">uniform mat4 u_projectionMatrix;</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">uniform float amplitude;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">uniform float amount;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">varying vec2 v_texCoord;</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">const float rotate = 20.0;</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">const float PI = 3.1415926;</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">mat4 rotateX(float a) {. &#x2009;. &#x2009;.}</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">mat4 rotateY(float a) {. &#x2009;. &#x2009;.}</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">mat4 rotateZ(float a) {. &#x2009;. &#x2009;.}</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">void main() {</Emphasis> &#x2009;</Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">v_texCoord = a_texCoord.xy;</Emphasis> &#x2009;</Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">vec4 pos = vec4(a_position, 1.0);</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">float r = 1.0 - abs((amount - 0.5) / 0.5);</Emphasis> &#x2009;</Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">float a = r * rotate * PI / 180.0;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">mat4 rotX = rotateX(a);</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">mat4 rotY = rotateY(a / 4.0);</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">mat4 rotZ = rotateZ(a / 8.0);</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">float dx = 0.01 * cos(3.0 * PI * (pos.x + amount)) * r;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">float dy = 0.01 * cos(3.0 * PI * (pos.y + amount)) * r;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">float dz = 0.1 * cos(3.0 * PI * (pos.x + pos.y + amount)) * r;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">pos.x += dx;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">pos.y += dy;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">pos.z += dz;</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">gl_Position = u_projectionMatrix * rotZ * rotY * rotX * pos;</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para>As you can see, this is <Emphasis Type="Italic">very</Emphasis> different from the CSS you are familiar with: it is an entirely new language. Yet applying all this as a transition for the <Emphasis FontCategory="NonProportional">#shaded-element</Emphasis> (shown in Listing 10-4) very much returns to the principles you explored in Chapter 2.</Para><Para><Emphasis Type="BoldItalic">Listing 10-4.</Emphasis>&#x2002;<Emphasis Type="Italic">A Transition Utilizing a CSS Custom Filter</Emphasis></Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">#shaded-element:hover {</Emphasis> &#x2009;</Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">filter: custom(url(&#x2018;wobble.vs&#x2019;)</Emphasis></Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">40 40,</Emphasis> &#x2009;</Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">amplitude 60,</Emphasis> &#x2009;</Para><Para Type="Programcode">    <Emphasis FontCategory="NonProportional">amount 1.0);</Emphasis> &#x2009;</Para><Para Type="Programcode"><Emphasis FontCategory="NonProportional">}</Emphasis></Para><Para>All of the controls on the filter remain the same, except for the <Emphasis FontCategory="NonProportional">amount</Emphasis>; the transition on the original default state will ensure that the element transitions smoothly into the new hover state.</Para><Para>Custom Filters promise an extreme degree of visual control over HTML content that is unachievable with standard CSS, and that has the potential to revolutionize both animation and interaction on the web. However, that process will take some time: the specification is very new and, as of this writing, is only supported in very recent builds of Chrome. Finalizing the specification, gaining cross-browser support, and dealing with important issues such as security is likely to take several years.</Para></Section1><Section1 ID="Sec12"><Heading>Future Trends: Blending and Compositing<IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>blending and composition</Secondary></IndexTerm></Heading><Para>Adobe is also advancing CSS in the area of blending and compositing, taking the controls you might be familiar with in Adobe PhotoShop and Illustrator&#x2014;such as multiply, darken, lighten, and advanced clipping&#x2014;and translating them to CSS.</Para><Para>While this work is only at the proposal stage, it promises a far more visually vibrant web if implemented, especially if the properties can be animated. It is conceivable that in the long term, bitmap and vector illustration tools will increasingly become content <Emphasis Type="Italic">creators</Emphasis> in the early stages of the production process<Emphasis Type="Italic">,</Emphasis> while a majority of editing work will be done live in the browser using CSS.</Para></Section1><Section1 ID="Sec13"><Heading>Future Trends: Reconciling CSS3 and SVG<IndexTerm><Primary>CSS3 animations and transitions</Primary><Secondary>SVG file</Secondary></IndexTerm></Heading><Para>For two web technologies that can work so well together and have influenced each other so powerfully (particularly in the area of transforms and filters), CSS and SVG continue to have a remarkable number of conflicts.</Para><Para>While CSS can be used to animate a number of SVG presentation attributes as well as SVG images themselves (as you saw in Chapter 9), and while SVG can animate itself&#x2014;using the <Emphasis FontCategory="NonProportional">&#x003C;animate&#x003E;</Emphasis> tag, part of a standard known as SMIL (Synchronized Multimedia Integration Language)&#x2014;merging the two is currently extremely difficult. CSS Keyframe Animation rules override CSS Transitions and SVG (SMIL) Animations, but are conflicted when it comes to CSS Transitions and SMIL Animations. The question of compatibility is complicated further by Internet Explorer 10&#x2019;s lack of support for SMIL.</Para><Para>These issues are being addressed by the W3C CSS-SVG Effects Task Force (<ExternalRef><RefSource>www.w3.org/Graphics/fx</RefSource><RefTarget TargetType="URL" Address="http://www.w3.org/Graphics/fx"/></ExternalRef>), but the developments and changes that may come out of that process are unknown at this time.</Para></Section1><Section1 ID="Sec14"><Heading>Summary</Heading><Para>Web animation technologies have come a very long way from the days when Flash and JavaScript were the only ways to achieve motion on a web page, and they are sure to go further still, with the tools and syntaxes you have looked at here&#x2014;and with those yet to come.</Para><Para>This book has offered both an introduction to and a deep dive into modern standards-based CSS3 animation. Along the way, you&#x2019;ve explored CSS Transforms, Transitions, keyframe Animations, and 3D manipulations, and coupled them with other technologies and techniques such as SVG, JavaScript, and responsive design. Supportive tools for developing with this m&#x00E9;lange of languages are coming along, but the most reliable&#x2014;and the only one that will allow you the freedom to remain at the cutting edge, should you choose to pursue it&#x2014;is the humble text editor.</Para><Para>The prolonged period of writing long cross-browser compatibility CSS declarations with vendor prefixes is coming to a close. Most recent browser versions are dropping them entirely for the properties you&#x2019;ve looked at in this book.</Para><Para>The new environment that this rapid adoption of technologies is forming&#x2014;the &#x201C;Next Web&#x201D;&#x2014;promises to be more open, richer in possibility, and more creative than anything that has come become. I&#x2019;m excited to see what new vistas it may uncover, as I hope you are too.</Para><Para>I look forward to seeing your work and getting your feedback&#x2014;and being inspired in turn by your explorations and innovations in CSS3 animation.</Para></Section1></Body><BodyRef FileRef="9781430247227_10_OnlinePDF.pdf" TargetType="OnlinePDF"/></Chapter>